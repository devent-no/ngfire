{"version":3,"file":"ngfire-auth.mjs","sources":["../../../../libs/ngfire/auth/src/operators.ts","../../../../libs/ngfire/auth/src/tokens.ts","../../../../libs/ngfire/auth/src/auth.ts","../../../../libs/ngfire/auth/src/ngfire-auth.ts"],"sourcesContent":["import type { Auth, User } from \"firebase/auth\";\nimport { onIdTokenChanged } from \"firebase/auth\";\nimport { Observable } from \"rxjs\";\n\nexport function user(auth: Auth): Observable<User|null> {\n  return new Observable(subscriber => {\n    const unsubscribe = onIdTokenChanged(\n      auth, \n      subscriber.next.bind(subscriber), \n      subscriber.error.bind(subscriber), \n      subscriber.complete.bind(subscriber),\n    );\n    return { unsubscribe };\n  });\n}\n","import { inject, InjectFlags, InjectionToken } from \"@angular/core\";\nimport { Auth, getAuth, initializeAuth } from \"firebase/auth\";\nimport { FIREBASE_APP } from \"ngfire/app\";\nimport { AUTH_DEPS, getConfig } from \"ngfire/tokens\";\n\nexport const FIRE_AUTH = new InjectionToken<Auth>('Fire auth instance', {\n  providedIn: 'root',\n  factory: () => {\n    const config = getConfig();\n    const app = inject(FIREBASE_APP);\n    const deps = inject(AUTH_DEPS, InjectFlags.Optional) || undefined;\n    if (config.auth) {\n      return config.auth(app, deps);\n    } else {\n      return deps ? initializeAuth(app, deps) : getAuth(app);\n    }\n  },\n});\n\n","import { inject, Injectable, Injector, NgZone, PLATFORM_ID } from \"@angular/core\";\nimport { isPlatformServer } from \"@angular/common\";\nimport { doc, getDoc, writeBatch, runTransaction } from \"firebase/firestore\";\nimport { UserCredential, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendEmailVerification, signOut, signInAnonymously, signInWithPopup, signInWithCustomToken, AuthProvider, User, getAdditionalUserInfo } from \"firebase/auth\";\nimport type { WriteBatch, DocumentSnapshot, DocumentReference, UpdateData } from 'firebase/firestore';\nimport { user } from './operators';\nimport { fromRef, toDate, FIRESTORE } from 'ngfire/firestore';\nimport { shareWithDelay, keepUnstableUntilFirst, AtomicWrite, MetaDocument, UpdateCallback } from 'ngfire/core';\nimport { filter, map, switchMap, shareReplay } from \"rxjs/operators\";\nimport { firstValueFrom, from, Observable, of } from \"rxjs\";\nimport { FIRE_AUTH } from \"./tokens\";\n\nconst exist = <T>(v?: T | null): v is T => v !== null && v !== undefined;\n\nexport interface AuthWriteOptions<Ctx = any> {\n  write?: AtomicWrite;\n  ctx?: Ctx;\n  collection?: null | string;\n}\n\n\n/**\n * Get the custom claims of a user. If no key is provided, return the whole claims object\n * @param user The user object returned by Firebase Auth\n * @param roles Keys of the custom claims inside the claim objet\n */\nexport async function getCustomClaims<Claims extends Record<string, any>>(\n  user: User,\n  keys?: string | string[]\n): Promise<Claims> {\n  if (!user) return {} as Claims;\n  const { claims } = await user.getIdTokenResult();\n  if (!keys) return claims as Claims;\n\n  const fields = Array.isArray(keys) ? keys : [keys];\n  const result: Record<string, any> = {};\n  for (const key of fields) {\n    if (claims[key]) {\n      result[key] = claims[key];\n    }\n  }\n  return result as Claims;\n}\n\n\nexport function isUpdateCallback<T>(\n  update: UpdateCallback<T> | Partial<T>\n): update is UpdateCallback<T> {\n  return typeof update === 'function';\n}\n\n\n\n@Injectable({ providedIn: 'root' })\nexport abstract class BaseFireAuth<Profile, Roles extends Record<string, any> | undefined = undefined> {\n  private memoProfile: Record<string, Observable<DocumentSnapshot<Profile>>> = {};\n  private platformId = inject(PLATFORM_ID);\n  protected getAuth = inject(FIRE_AUTH);\n  protected injector = inject(Injector);\n  private zone = inject(NgZone);\n  \n  protected abstract path: string | undefined;\n  protected idKey = 'id';\n  protected verificationUrl?: string;\n  \n  protected abstract signin(...arg: any[]): Promise<UserCredential>;\n  protected abstract signout(): Promise<void>;\n\n  protected get db() {\n    return this.injector.get(FIRESTORE);\n  }\n  \n  get auth() {\n    return this.injector.get(FIRE_AUTH);\n  }\n\n  get user() {\n    return this.auth.currentUser;\n  }\n\n  user$ = isPlatformServer(this.platformId)\n    ? this.zone.runOutsideAngular(() => user(this.auth))\n    : user(this.auth).pipe(shareReplay({ refCount: true, bufferSize: 1 }));\n  \n  /**\n   * Observe current user. Doesn't emit if there are no user connected.\n   * Use `user` if you need to know if user is connected\n   */\n  currentUser$ = this.user$.pipe(filter(exist));\n\n  /** Listen on changes from the authenticated user */\n  profile$ = this.user$.pipe(\n    map((user) => this.getRef({ user })),\n    switchMap((ref) => (ref ? this.useMemo(ref) : of(undefined))),\n    map(snapshot => snapshot ? this.fromFirestore(snapshot) : undefined),\n  );\n\n  /** Triggered when the profile has been created */\n  protected onCreate?(profile: Partial<Profile>, options: AuthWriteOptions): unknown;\n  /** Triggered when the profile has been updated */\n  protected onUpdate?(profile: Partial<Profile>, options: AuthWriteOptions): unknown;\n  /** Triggered when the profile has been deleted */\n  protected onDelete?(options: AuthWriteOptions): unknown;\n  /** Triggered when user signin for the first time or signup with email & password */\n  protected onSignup?(credential: UserCredential, options: AuthWriteOptions): unknown;\n  /** Triggered when a user signin, except for the first time @see onSignup */\n  protected onSignin?(credential: UserCredential): unknown;\n  /** Triggered when a user signout */\n  protected onSignout?(): unknown;\n\n  protected useMemo(ref: DocumentReference<Profile>) {\n    if (isPlatformServer(this.platformId)) {\n      return this.zone.runOutsideAngular(() => from(getDoc(ref))).pipe(keepUnstableUntilFirst(this.zone));\n    }\n    if (!this.memoProfile[ref.path]) {\n      this.memoProfile[ref.path] = fromRef(ref).pipe(\n        shareWithDelay(100),\n      );\n    }\n    return this.memoProfile[ref.path];\n  }\n\n  /**\n   * Select the roles for this user. Can be in custom claims or in a Firestore collection\n   * @param user The user given by FireAuth\n   * @see getCustomClaims to get the custom claims out of the user\n   * @note Can be overwritten\n   */\n  protected selectRoles(user: User): Promise<Roles> | Observable<Roles> {\n    return getCustomClaims<Roles extends Record<string, any> ? Roles : any>(user) as Promise<Roles>;\n  }\n\n  /**\n   * Function triggered when getting data from firestore\n   * @note should be overwritten\n   */\n  protected fromFirestore(snapshot: DocumentSnapshot<Profile>) {\n    return snapshot.exists()\n      ? ({ ...toDate(snapshot.data()), [this.idKey]: snapshot.id } as Profile)\n      : undefined;\n  }\n\n  /**\n   * Function triggered when adding/updating data to firestore\n   * @note should be overwritten\n   */\n  protected toFirestore(profile: Partial<Profile>, actionType: 'add' | 'update'): any {\n    if (actionType === 'add') {\n      const _meta: MetaDocument = { createdAt: new Date(), modifiedAt: new Date() };\n      return { _meta, ...profile };\n    } else {\n      return { ...profile, '_meta.modifiedAt': new Date() };\n    }\n  }\n\n  /**\n   * Function triggered when transforming a user into a profile\n   * @param user The user object from FireAuth\n   * @param ctx The context given on signup\n   */\n  protected createProfile(user: User, ctx?: any): Promise<Partial<Profile>> | Partial<Profile> {\n    return { avatar: user?.photoURL, displayName: user?.displayName } as any;\n  }\n\n  /** Triggerd when creating or getting a user */\n  protected useCollection(user: User): undefined | null | string | Promise<undefined | null | string> {\n    return this.path ?? null;\n  }\n\n  /** If user connected, return its document in Firestore,  */\n  protected getRef(options: { user?: User | null; collection?: string | null } = {}) {\n    const user = options.user ?? this.user;\n    if (user) {\n      return doc(this.db, `${this.path}/${user.uid}`) as DocumentReference<Profile>\n    }\n    return;\n  }\n\n  /** Return current user. Only return when auth has emit */\n  awaitUser() {\n    return firstValueFrom(this.user$);\n  }\n\n  /** Get the current user Profile from Firestore */\n  async getValue() {\n    const ref = this.getRef();\n    if (ref) {\n      const snapshot = await getDoc(ref);\n      return this.fromFirestore(snapshot);\n    }\n    return;\n  }\n\n  /**\n   * @description Delete user from authentication service and database\n   * WARNING This is security sensitive operation\n   */\n  async delete(options: AuthWriteOptions = {}) {\n    const user = this.user;\n    const ref = this.getRef({ user });\n    if (!user || !ref) {\n      throw new Error('No user connected');\n    }\n    const { write = writeBatch(this.db), ctx } = options;\n    write.delete(ref);\n    if (this.onDelete) await this.onDelete({ write, ctx });\n    if (!options.write) {\n      await (write as WriteBatch).commit();\n    }\n    return user.delete();\n  }\n\n  /** Update the current profile of the authenticated user */\n  async update(\n    profile: Partial<Profile> | UpdateCallback<Profile>,\n    options: AuthWriteOptions = {}\n  ) {\n    const ref = this.getRef();\n    if (!ref) {\n      throw new Error('No user connected.');\n    }\n    if (isUpdateCallback(profile)) {\n      return runTransaction(this.db, async (tx) => {\n        const snapshot = (await tx.get(ref)) as DocumentSnapshot<Profile>;\n        const doc = this.fromFirestore(snapshot);\n        if (!doc) {\n          throw new Error(`Could not find document at \"${this.path}/${snapshot.id}\"`);\n        }\n        const data = await profile(this.toFirestore(doc, 'update'), tx);\n        tx.update(ref, data as any);\n        if (this.onUpdate) await this.onUpdate(data, { write: tx, ctx: options.ctx });\n        return tx;\n      });\n    } else if (typeof profile === 'object') {\n      const { write = writeBatch(this.db), ctx } = options;\n      (write as WriteBatch).update(ref, this.toFirestore(profile, 'update'));\n      if (this.onUpdate) await this.onUpdate(profile, { write, ctx });\n      // If there is no atomic write provided\n      if (!options.write) {\n        return (write as WriteBatch).commit();\n      }\n    }\n  }\n\n  /** Manage the creation of the user into Firestore */\n  protected async create(cred: UserCredential, options: AuthWriteOptions) {\n    const user = cred.user;\n    if (!user) {\n      throw new Error('Could not create an account');\n    }\n\n    const { write = writeBatch(this.db), ctx, collection } = options;\n    if (this.onSignup) await this.onSignup(cred, { write, ctx, collection });\n\n    const ref = this.getRef({ user, collection });\n    if (ref) {\n      const profile = await this.createProfile(user, ctx);\n      (write as WriteBatch).set(ref, this.toFirestore(profile, 'add'));\n      if (this.onCreate) await this.onCreate(profile, { write, ctx, collection });\n      if (!options.write) {\n        await (write as WriteBatch).commit();\n      }\n    }\n    return cred;\n  }\n}\n\n\n\n\n\n\n\n@Injectable({ providedIn: 'root' })\nexport abstract class FireAuth<Profile, Roles extends Record<string, any> | undefined = undefined> extends BaseFireAuth<Profile, Roles> {\n  protected abstract path: string | undefined;\n\n  /**\n   * Create a user based on email and password\n   * Will send a verification email to the user if verificationURL is provided config\n   */\n  async signup(\n    email: string,\n    password: string,\n    options: AuthWriteOptions = {}\n  ): Promise<UserCredential> {\n    const cred = await createUserWithEmailAndPassword(this.auth, email, password);\n    if (this.verificationUrl) {\n      const url = this.verificationUrl;\n      await sendEmailVerification(cred.user, { url });\n    }\n    return this.create(cred, options);\n  }\n\n  /** Signin with email & password, provider name, provider objet or custom token */\n  // tslint:disable-next-line: unified-signatures\n  signin(email: string, password: string, options?: AuthWriteOptions): Promise<UserCredential>;\n  signin(authProvider: AuthProvider, options?: AuthWriteOptions): Promise<UserCredential>;\n  // tslint:disable-next-line: unified-signatures\n  signin(token: string, options?: AuthWriteOptions): Promise<UserCredential>;\n  async signin(\n    provider?: AuthProvider | string,\n    passwordOrOptions?: string | AuthWriteOptions,\n    options?: AuthWriteOptions\n  ): Promise<UserCredential> {\n    try {\n      let cred: UserCredential;\n      if (!provider) {\n        cred = await signInAnonymously(this.auth);\n      } else if (\n        passwordOrOptions &&\n        typeof provider === 'string' &&\n        typeof passwordOrOptions === 'string'\n      ) {\n        cred = await signInWithEmailAndPassword(this.auth, provider, passwordOrOptions);\n      } else if (typeof provider === 'object') {\n        cred = await signInWithPopup(this.auth, provider);\n      } else {\n        cred = await signInWithCustomToken(this.auth, provider);\n      }\n      if (!cred.user) {\n        throw new Error('Could not find credential for signin');\n      }\n      \n      // Signup: doesn't trigger onSignin\n      if (getAdditionalUserInfo(cred)?.isNewUser) {\n        options = typeof passwordOrOptions === 'object' ? passwordOrOptions : {};\n        return this.create(cred, options);\n      }\n\n      if (this.onSignin) await this.onSignin(cred);\n      return cred;\n    } catch (err: any) {\n      if (err.code === 'auth/operation-not-allowed') {\n        console.warn('You tried to connect with a disabled auth provider. Enable it in Firebase console');\n      }\n      throw err;\n    }\n  }\n\n  /** Signs out the current user and clear the store */\n  async signout() {\n    await signOut(this.auth);\n    if (this.onSignout) await this.onSignout();\n  }\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}