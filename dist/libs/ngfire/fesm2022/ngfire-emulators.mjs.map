{"version":3,"file":"ngfire-emulators.mjs","sources":["../../../../libs/ngfire/emulators/src/auth.ts","../../../../libs/ngfire/emulators/src/database.ts","../../../../libs/ngfire/emulators/src/firestore.ts","../../../../libs/ngfire/emulators/src/functions.ts","../../../../libs/ngfire/emulators/src/storage.ts","../../../../libs/ngfire/emulators/src/ngfire-emulators.ts"],"sourcesContent":["import type { FirebaseApp } from \"firebase/app\";\nimport { connectAuthEmulator, Dependencies, getAuth, initializeAuth } from \"firebase/auth\";\nimport { FirebaseParams } from \"./types\";\n\nexport const authEmulator = (...emulatorParams: FirebaseParams<typeof connectAuthEmulator>) => {\n  return (app: FirebaseApp, deps?: Dependencies) => {\n    const auth = deps ? initializeAuth(app, deps) : getAuth(app);\n    connectAuthEmulator(auth, ...emulatorParams);\n    return auth;\n  }\n}","import { connectDatabaseEmulator, getDatabase } from \"firebase/database\";\nimport { FirebaseParams } from \"./types\";\n\nexport const databaseEmulator = (...emulatorParams: FirebaseParams<typeof connectDatabaseEmulator>) => {\n  return (...params: Parameters<typeof getDatabase>) => {\n    const database = getDatabase(...params);\n    connectDatabaseEmulator(database, ...emulatorParams);\n    return database;\n  }\n}","import { connectFirestoreEmulator, initializeFirestore } from \"firebase/firestore\";\nimport { FirebaseParams } from \"./types\";\n\nexport const firestoreEmulator = (...emulatorParams: FirebaseParams<typeof connectFirestoreEmulator>) => {\n  return (...params: Parameters<typeof initializeFirestore>) => {\n    const firestore = initializeFirestore(...params);\n    connectFirestoreEmulator(firestore, ...emulatorParams);\n    return firestore;\n  }\n}","import { connectFunctionsEmulator, getFunctions } from \"firebase/functions\";\nimport { FirebaseParams } from \"./types\";\n\nexport const functionsEmulator = (...emulatorParams: FirebaseParams<typeof connectFunctionsEmulator>) => {\n  return (...params: Parameters<typeof getFunctions>) => {\n    const functions = getFunctions(...params);\n    connectFunctionsEmulator(functions, ...emulatorParams);\n    return functions;\n  }\n}","import { connectStorageEmulator, getStorage } from \"firebase/storage\";\nimport { FirebaseParams } from \"./types\";\n\nexport const storageEmulator = (...emulatorParams: FirebaseParams<typeof connectStorageEmulator>) => {\n  return (...params: Parameters<typeof getStorage>) => {\n    const storage = getStorage(...params);\n    connectStorageEmulator(storage, ...emulatorParams);\n    return storage;\n  }\n}","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;MAIa,YAAY,GAAG,CAAC,GAAG,cAA0D,KAAI;AAC5F,IAAA,OAAO,CAAC,GAAgB,EAAE,IAAmB,KAAI;AAC/C,QAAA,MAAM,IAAI,GAAG,IAAI,GAAG,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AAC7D,QAAA,mBAAmB,CAAC,IAAI,EAAE,GAAG,cAAc,CAAC,CAAC;AAC7C,QAAA,OAAO,IAAI,CAAC;AACd,KAAC,CAAA;AACH;;MCPa,gBAAgB,GAAG,CAAC,GAAG,cAA8D,KAAI;AACpG,IAAA,OAAO,CAAC,GAAG,MAAsC,KAAI;AACnD,QAAA,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,MAAM,CAAC,CAAC;AACxC,QAAA,uBAAuB,CAAC,QAAQ,EAAE,GAAG,cAAc,CAAC,CAAC;AACrD,QAAA,OAAO,QAAQ,CAAC;AAClB,KAAC,CAAA;AACH;;MCNa,iBAAiB,GAAG,CAAC,GAAG,cAA+D,KAAI;AACtG,IAAA,OAAO,CAAC,GAAG,MAA8C,KAAI;AAC3D,QAAA,MAAM,SAAS,GAAG,mBAAmB,CAAC,GAAG,MAAM,CAAC,CAAC;AACjD,QAAA,wBAAwB,CAAC,SAAS,EAAE,GAAG,cAAc,CAAC,CAAC;AACvD,QAAA,OAAO,SAAS,CAAC;AACnB,KAAC,CAAA;AACH;;MCNa,iBAAiB,GAAG,CAAC,GAAG,cAA+D,KAAI;AACtG,IAAA,OAAO,CAAC,GAAG,MAAuC,KAAI;AACpD,QAAA,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,MAAM,CAAC,CAAC;AAC1C,QAAA,wBAAwB,CAAC,SAAS,EAAE,GAAG,cAAc,CAAC,CAAC;AACvD,QAAA,OAAO,SAAS,CAAC;AACnB,KAAC,CAAA;AACH;;MCNa,eAAe,GAAG,CAAC,GAAG,cAA6D,KAAI;AAClG,IAAA,OAAO,CAAC,GAAG,MAAqC,KAAI;AAClD,QAAA,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC;AACtC,QAAA,sBAAsB,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC,CAAC;AACnD,QAAA,OAAO,OAAO,CAAC;AACjB,KAAC,CAAA;AACH;;ACTA;;AAEG;;;;"}