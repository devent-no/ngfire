import { inject, InjectionToken } from "@angular/core";
export const FIREBASE_APP_SETTINGS = new InjectionToken('FirebaseApp Configuration');
export const FIREBASE_CONFIG = new InjectionToken('Firebase Config');
export const REGION_OR_DOMAIN = new InjectionToken('Firebase cloud functions region or domain');
export const FIRESTORE_SETTINGS = new InjectionToken('Firestore settings');
export const ANALYTICS_SETTINGS = new InjectionToken('Analytics settings');
export const STORAGE_BUCKET = new InjectionToken('The gs:// url to your Firebase Storage Bucket.');
export const DB_URL = new InjectionToken('The URL of the Realtime Database instance to connect to');
export const AUTH_DEPS = new InjectionToken('The dependencies that can be used to initialize an Auth instance.');
export function getConfig() {
    try {
        return inject(FIREBASE_CONFIG);
    }
    catch (err) {
        const message = `You should add FIREBASE_CONFIG token to you root module providers (probably AppModule).
Example:
  
@NgModule({
  declarations: [...],
  imports: [...],
  providers: [{ provide: FIREBASE_CONFIG, useValue: environment.firebase }] <--- Add this
  ...
})

Original message: ${err.message}`;
        throw new Error(message);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nZmlyZS90b2tlbnMvc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBb0J2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBc0IsMkJBQTJCLENBQUMsQ0FBQztBQUMxRyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQWlCLGlCQUFpQixDQUFDLENBQUM7QUFDckYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQVMsMkNBQTJDLENBQUMsQ0FBQztBQUN4RyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FBb0Isb0JBQW9CLENBQUMsQ0FBQztBQUM5RixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FBb0Isb0JBQW9CLENBQUMsQ0FBQztBQUM5RixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQVMsZ0RBQWdELENBQUMsQ0FBQztBQUMzRyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLENBQVMseURBQXlELENBQUMsQ0FBQztBQUM1RyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQWUsbUVBQW1FLENBQUMsQ0FBQztBQUcvSCxNQUFNLFVBQVUsU0FBUztJQUN2QixJQUFJLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLE1BQU0sT0FBTyxHQUFFOzs7Ozs7Ozs7O29CQVVFLEdBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9ucywgZ2V0RnVuY3Rpb25zIH0gZnJvbSBcImZpcmViYXNlL2Z1bmN0aW9uc1wiO1xuaW1wb3J0IHR5cGUgeyBGaXJlYmFzZVN0b3JhZ2UsIGdldFN0b3JhZ2UgfSBmcm9tIFwiZmlyZWJhc2Uvc3RvcmFnZVwiO1xuaW1wb3J0IHR5cGUgeyBGaXJlYmFzZUFwcCwgRmlyZWJhc2VBcHBTZXR0aW5ncywgRmlyZWJhc2VPcHRpb25zLCBpbml0aWFsaXplQXBwIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCB0eXBlIHsgQXV0aCwgRGVwZW5kZW5jaWVzLCBpbml0aWFsaXplQXV0aCB9IGZyb20gXCJmaXJlYmFzZS9hdXRoXCI7XG5pbXBvcnQgdHlwZSB7IEZpcmVzdG9yZSwgRmlyZXN0b3JlU2V0dGluZ3MsIGluaXRpYWxpemVGaXJlc3RvcmUgfSBmcm9tICdmaXJlYmFzZS9maXJlc3RvcmUnO1xuaW1wb3J0IHR5cGUgeyBEYXRhYmFzZSwgZ2V0RGF0YWJhc2UgfSBmcm9tIFwiZmlyZWJhc2UvZGF0YWJhc2VcIjtcbmltcG9ydCB0eXBlIHsgQW5hbHl0aWNzLCBBbmFseXRpY3NTZXR0aW5ncywgaW5pdGlhbGl6ZUFuYWx5dGljcyB9IGZyb20gXCJmaXJlYmFzZS9hbmFseXRpY3NcIjtcblxuXG5leHBvcnQgaW50ZXJmYWNlIEZpcmViYXNlQ29uZmlnIHtcbiAgb3B0aW9uczogRmlyZWJhc2VPcHRpb25zLFxuICBhcHA/OiAoLi4ucGFyYW1zOiBQYXJhbWV0ZXJzPHR5cGVvZiBpbml0aWFsaXplQXBwPikgPT4gRmlyZWJhc2VBcHAsXG4gIGZpcmVzdG9yZT86ICguLi5wYXJhbXM6IFBhcmFtZXRlcnM8dHlwZW9mIGluaXRpYWxpemVGaXJlc3RvcmU+KSA9PiBGaXJlc3RvcmUsXG4gIGF1dGg/OiAoLi4ucGFyYW1zOiBQYXJhbWV0ZXJzPHR5cGVvZiBpbml0aWFsaXplQXV0aD4pID0+IEF1dGgsXG4gIHN0b3JhZ2U/OiAoLi4ucGFyYW1zOiBQYXJhbWV0ZXJzPHR5cGVvZiBnZXRTdG9yYWdlPikgPT4gRmlyZWJhc2VTdG9yYWdlLFxuICBmdW5jdGlvbnM/OiAoLi4ucGFyYW1zOiBQYXJhbWV0ZXJzPHR5cGVvZiBnZXRGdW5jdGlvbnM+KSA9PiBGdW5jdGlvbnMsXG4gIGRhdGFiYXNlPzogKC4uLnBhcmFtczogUGFyYW1ldGVyczx0eXBlb2YgZ2V0RGF0YWJhc2U+KSA9PiBEYXRhYmFzZSxcbiAgYW5hbHl0aWNzPzogKC4uLnBhcmFtczogUGFyYW1ldGVyczx0eXBlb2YgaW5pdGlhbGl6ZUFuYWx5dGljcz4pID0+IEFuYWx5dGljcyxcbn1cbmV4cG9ydCBjb25zdCBGSVJFQkFTRV9BUFBfU0VUVElOR1MgPSBuZXcgSW5qZWN0aW9uVG9rZW48RmlyZWJhc2VBcHBTZXR0aW5ncz4oJ0ZpcmViYXNlQXBwIENvbmZpZ3VyYXRpb24nKTtcbmV4cG9ydCBjb25zdCBGSVJFQkFTRV9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48RmlyZWJhc2VDb25maWc+KCdGaXJlYmFzZSBDb25maWcnKTtcbmV4cG9ydCBjb25zdCBSRUdJT05fT1JfRE9NQUlOID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ0ZpcmViYXNlIGNsb3VkIGZ1bmN0aW9ucyByZWdpb24gb3IgZG9tYWluJyk7XG5leHBvcnQgY29uc3QgRklSRVNUT1JFX1NFVFRJTkdTID0gbmV3IEluamVjdGlvblRva2VuPEZpcmVzdG9yZVNldHRpbmdzPignRmlyZXN0b3JlIHNldHRpbmdzJyk7XG5leHBvcnQgY29uc3QgQU5BTFlUSUNTX1NFVFRJTkdTID0gbmV3IEluamVjdGlvblRva2VuPEFuYWx5dGljc1NldHRpbmdzPignQW5hbHl0aWNzIHNldHRpbmdzJyk7XG5leHBvcnQgY29uc3QgU1RPUkFHRV9CVUNLRVQgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignVGhlIGdzOi8vIHVybCB0byB5b3VyIEZpcmViYXNlIFN0b3JhZ2UgQnVja2V0LicpO1xuZXhwb3J0IGNvbnN0IERCX1VSTCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdUaGUgVVJMIG9mIHRoZSBSZWFsdGltZSBEYXRhYmFzZSBpbnN0YW5jZSB0byBjb25uZWN0IHRvJyk7XG5leHBvcnQgY29uc3QgQVVUSF9ERVBTID0gbmV3IEluamVjdGlvblRva2VuPERlcGVuZGVuY2llcz4oJ1RoZSBkZXBlbmRlbmNpZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBpbml0aWFsaXplIGFuIEF1dGggaW5zdGFuY2UuJyk7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpZygpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaW5qZWN0KEZJUkVCQVNFX0NPTkZJRyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnN0IG1lc3NhZ2U9IGBZb3Ugc2hvdWxkIGFkZCBGSVJFQkFTRV9DT05GSUcgdG9rZW4gdG8geW91IHJvb3QgbW9kdWxlIHByb3ZpZGVycyAocHJvYmFibHkgQXBwTW9kdWxlKS5cbkV4YW1wbGU6XG4gIFxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbLi4uXSxcbiAgaW1wb3J0czogWy4uLl0sXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogRklSRUJBU0VfQ09ORklHLCB1c2VWYWx1ZTogZW52aXJvbm1lbnQuZmlyZWJhc2UgfV0gPC0tLSBBZGQgdGhpc1xuICAuLi5cbn0pXG5cbk9yaWdpbmFsIG1lc3NhZ2U6ICR7KGVyciBhcyBFcnJvcikubWVzc2FnZX1gO1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufSJdfQ==