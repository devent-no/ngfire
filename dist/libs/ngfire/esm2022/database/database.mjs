import { inject, Injectable, Injector } from "@angular/core";
import { QueryConstraint, ref as dbRef, remove, set, update, query as queryWithConstraints } from 'firebase/database';
import { assertPath, pathWithParams } from "ngfire/core";
import { fromQuery } from "./operators";
import { DATABASE } from "./tokens";
import * as i0 from "@angular/core";
export function isContraintList(idsOrQuery) {
    return idsOrQuery.every(query => query instanceof QueryConstraint);
}
export class FireDatabase {
    constructor() {
        this.injector = inject(Injector);
        this.memory = new Map();
    }
    get db() {
        return this.injector.get(DATABASE);
    }
    getRef(paths, paramsOrConstraints, params) {
        if (!arguments.length || !paths)
            return undefined;
        const hasContraints = Array.isArray(paramsOrConstraints);
        if (Array.isArray(paths)) {
            return paths.map((path) => this.getRef(path, paramsOrConstraints, params));
        }
        if (hasContraints) {
            const path = pathWithParams(paths, params);
            assertPath(path);
            const ref = dbRef(this.db, path);
            return queryWithConstraints(ref, ...paramsOrConstraints);
        }
        else {
            const path = pathWithParams(paths, paramsOrConstraints);
            assertPath(path);
            return dbRef(this.db, path);
        }
    }
    fromQuery(query) {
        let existing = null;
        for (const [key, value] of this.memory.entries()) {
            if (query.isEqual(key)) {
                existing = value;
                break;
            }
        }
        if (existing)
            return existing;
        this.memory.set(query, fromQuery(query));
        return this.memory.get(query);
    }
    create(path, content) {
        return set(this.getRef(path), content);
    }
    update(path, value) {
        const ref = this.getRef(path);
        return update(ref, value);
    }
    remove(path) {
        const ref = this.getRef(path);
        return remove(ref);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: FireDatabase, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: FireDatabase, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: FireDatabase, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nZmlyZS9kYXRhYmFzZS9zcmMvZGF0YWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsR0FBRyxJQUFJLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLElBQUksb0JBQW9CLEVBQWdCLE1BQU0sbUJBQW1CLENBQUM7QUFHcEksT0FBTyxFQUFVLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDOztBQUdwQyxNQUFNLFVBQVUsZUFBZSxDQUFDLFVBQWlCO0lBQy9DLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssWUFBWSxlQUFlLENBQUMsQ0FBQztBQUNyRSxDQUFDO0FBR0QsTUFBTSxPQUFPLFlBQVk7SUFEekI7UUFFWSxhQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLFdBQU0sR0FBRyxJQUFJLEdBQUcsRUFBbUMsQ0FBQztLQStEL0Q7SUE3REMsSUFBSSxFQUFFO1FBQ0osT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBU00sTUFBTSxDQUNYLEtBQXdCLEVBQ3hCLG1CQUFnRCxFQUNoRCxNQUFlO1FBRWYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLO1lBQUUsT0FBTyxTQUFTLENBQUM7UUFDbEQsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRXpELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3pCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUM3RSxDQUFDO1FBRUQsSUFBSSxhQUFhLEVBQUUsQ0FBQztZQUNsQixNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzNDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNqQyxPQUFPLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxHQUFHLG1CQUFtQixDQUFDLENBQUM7UUFDM0QsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsS0FBSyxFQUFFLG1CQUFtQixDQUFDLENBQUM7WUFDeEQsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUIsQ0FBQztJQUNILENBQUM7SUFFRCxTQUFTLENBQUMsS0FBWTtRQUNwQixJQUFJLFFBQVEsR0FBb0MsSUFBSSxDQUFDO1FBQ3JELEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7WUFDakQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBQ3ZCLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ2pCLE1BQU07WUFDUixDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksUUFBUTtZQUFFLE9BQU8sUUFBUSxDQUFDO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN6QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBNkIsQ0FBQztJQUM1RCxDQUFDO0lBRUQsTUFBTSxDQUFJLElBQVksRUFBRSxPQUFVO1FBQ2hDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELE1BQU0sQ0FBSSxJQUFZLEVBQUUsS0FBaUI7UUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixPQUFPLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2pCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQzs4R0FoRVUsWUFBWTtrSEFBWixZQUFZLGNBREMsTUFBTTs7MkZBQ25CLFlBQVk7a0JBRHhCLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBRdWVyeUNvbnN0cmFpbnQsIHJlZiBhcyBkYlJlZiwgcmVtb3ZlLCBzZXQsIHVwZGF0ZSwgcXVlcnkgYXMgcXVlcnlXaXRoQ29uc3RyYWludHMsIERhdGFTbmFwc2hvdCB9IGZyb20gJ2ZpcmViYXNlL2RhdGFiYXNlJztcbmltcG9ydCB0eXBlIHsgRGF0YWJhc2VSZWZlcmVuY2UsIFF1ZXJ5IH0gZnJvbSAnZmlyZWJhc2UvZGF0YWJhc2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBQYXJhbXMsIGFzc2VydFBhdGgsIHBhdGhXaXRoUGFyYW1zIH0gZnJvbSBcIm5nZmlyZS9jb3JlXCI7XG5pbXBvcnQgeyBmcm9tUXVlcnkgfSBmcm9tIFwiLi9vcGVyYXRvcnNcIjtcbmltcG9ydCB7IERBVEFCQVNFIH0gZnJvbSBcIi4vdG9rZW5zXCI7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29udHJhaW50TGlzdChpZHNPclF1ZXJ5OiBhbnlbXSk6IGlkc09yUXVlcnkgaXMgUXVlcnlDb25zdHJhaW50W10ge1xuICByZXR1cm4gaWRzT3JRdWVyeS5ldmVyeShxdWVyeSA9PiBxdWVyeSBpbnN0YW5jZW9mIFF1ZXJ5Q29uc3RyYWludCk7XG59XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRmlyZURhdGFiYXNlIHtcbiAgcHJvdGVjdGVkIGluamVjdG9yID0gaW5qZWN0KEluamVjdG9yKTtcbiAgcHJvdGVjdGVkIG1lbW9yeSA9IG5ldyBNYXA8UXVlcnksIE9ic2VydmFibGU8RGF0YVNuYXBzaG90Pj4oKTtcblxuICBnZXQgZGIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5qZWN0b3IuZ2V0KERBVEFCQVNFKTtcbiAgfVxuXG4gIC8qKiBHZXQgdGhlIHJlZmVyZW5jZSBvZiB0aGUgZG9jdW1lbnQsIGNvbGxlY3Rpb24gb3IgcXVlcnkgKi9cbiAgcHVibGljIGdldFJlZihwYXRoOiBzdHJpbmcsIHBhcmFtcz86IFBhcmFtcyk6IERhdGFiYXNlUmVmZXJlbmNlO1xuICBwdWJsaWMgZ2V0UmVmKHBhdGhzOiBzdHJpbmdbXSwgcGFyYW1zPzogUGFyYW1zKTogRGF0YWJhc2VSZWZlcmVuY2VbXTtcbiAgcHVibGljIGdldFJlZihwYXRoOiBzdHJpbmcsIGNvbnN0cmFpbnRzOiBRdWVyeUNvbnN0cmFpbnRbXSwgcGFyYW1zPzogUGFyYW1zKTogUXVlcnk7XG4gIHB1YmxpYyBnZXRSZWYocGF0aHM6IHN0cmluZ1tdLCBjb25zdHJhaW50czogUXVlcnlDb25zdHJhaW50W10sIHBhcmFtcz86IFBhcmFtcyk6IFF1ZXJ5O1xuICAvLyBvdmVybG9hZCB1c2VkIGludGVybmFsbHkgd2hlbiBsb29waW5nIG92ZXIgcGF0aHMgYXJyYXlcbiAgcHVibGljIGdldFJlZihwYXRoczogc3RyaW5nLCBjb25zdHJhaW50cz86IFBhcmFtcyB8IFF1ZXJ5Q29uc3RyYWludFtdLCBwYXJhbXM/OiBQYXJhbXMpOiBRdWVyeSB8IERhdGFiYXNlUmVmZXJlbmNlO1xuICBwdWJsaWMgZ2V0UmVmKFxuICAgIHBhdGhzOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBwYXJhbXNPckNvbnN0cmFpbnRzPzogUGFyYW1zIHwgUXVlcnlDb25zdHJhaW50W10sXG4gICAgcGFyYW1zPzogUGFyYW1zXG4gICk6IHVuZGVmaW5lZCB8IFF1ZXJ5IHwgUXVlcnlbXSB8IERhdGFiYXNlUmVmZXJlbmNlIHwgRGF0YWJhc2VSZWZlcmVuY2VbXSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoIHx8ICFwYXRocykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjb25zdCBoYXNDb250cmFpbnRzID0gQXJyYXkuaXNBcnJheShwYXJhbXNPckNvbnN0cmFpbnRzKTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHBhdGhzKSkge1xuICAgICAgcmV0dXJuIHBhdGhzLm1hcCgocGF0aCkgPT4gdGhpcy5nZXRSZWYocGF0aCwgcGFyYW1zT3JDb25zdHJhaW50cywgcGFyYW1zKSk7XG4gICAgfVxuXG4gICAgaWYgKGhhc0NvbnRyYWludHMpIHtcbiAgICAgIGNvbnN0IHBhdGggPSBwYXRoV2l0aFBhcmFtcyhwYXRocywgcGFyYW1zKTtcbiAgICAgIGFzc2VydFBhdGgocGF0aCk7XG4gICAgICBjb25zdCByZWYgPSBkYlJlZih0aGlzLmRiLCBwYXRoKTtcbiAgICAgIHJldHVybiBxdWVyeVdpdGhDb25zdHJhaW50cyhyZWYsIC4uLnBhcmFtc09yQ29uc3RyYWludHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYXRoID0gcGF0aFdpdGhQYXJhbXMocGF0aHMsIHBhcmFtc09yQ29uc3RyYWludHMpO1xuICAgICAgYXNzZXJ0UGF0aChwYXRoKTtcbiAgICAgIHJldHVybiBkYlJlZih0aGlzLmRiLCBwYXRoKTtcbiAgICB9XG4gIH1cblxuICBmcm9tUXVlcnkocXVlcnk6IFF1ZXJ5KSB7XG4gICAgbGV0IGV4aXN0aW5nOiBPYnNlcnZhYmxlPERhdGFTbmFwc2hvdD4gfCBudWxsID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLm1lbW9yeS5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChxdWVyeS5pc0VxdWFsKGtleSkpIHtcbiAgICAgICAgZXhpc3RpbmcgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChleGlzdGluZykgcmV0dXJuIGV4aXN0aW5nO1xuICAgIHRoaXMubWVtb3J5LnNldChxdWVyeSwgZnJvbVF1ZXJ5KHF1ZXJ5KSk7XG4gICAgcmV0dXJuIHRoaXMubWVtb3J5LmdldChxdWVyeSkgYXMgT2JzZXJ2YWJsZTxEYXRhU25hcHNob3Q+O1xuICB9XG5cbiAgY3JlYXRlPFQ+KHBhdGg6IHN0cmluZywgY29udGVudDogVCkge1xuICAgIHJldHVybiBzZXQodGhpcy5nZXRSZWYocGF0aCksIGNvbnRlbnQpO1xuICB9XG5cbiAgdXBkYXRlPFQ+KHBhdGg6IHN0cmluZywgdmFsdWU6IFBhcnRpYWw8VD4pIHtcbiAgICBjb25zdCByZWYgPSB0aGlzLmdldFJlZihwYXRoKTtcbiAgICByZXR1cm4gdXBkYXRlKHJlZiwgdmFsdWUpO1xuICB9XG5cbiAgcmVtb3ZlKHBhdGg6IHN0cmluZykge1xuICAgIGNvbnN0IHJlZiA9IHRoaXMuZ2V0UmVmKHBhdGgpO1xuICAgIHJldHVybiByZW1vdmUocmVmKTtcbiAgfVxufVxuIl19