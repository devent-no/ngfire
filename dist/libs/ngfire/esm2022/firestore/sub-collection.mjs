import { isPlatformServer } from "@angular/common";
import { collectionGroup, query } from "firebase/firestore";
import { keepUnstableUntilFirst, isIdList } from 'ngfire/core';
import { FireCollection } from "./collection";
import { toDate } from "./utils";
import { firstValueFrom, from, of } from "rxjs";
export class FireSubCollection extends FireCollection {
    constructor() {
        super(...arguments);
        this.pathKey = 'path';
    }
    get groupId() {
        return this.path.split('/').pop();
    }
    /** Function triggered when getting data from firestore */
    fromFirestore(snapshot) {
        if (snapshot.exists()) {
            return {
                ...toDate(snapshot.data()),
                [this.idKey]: snapshot.id,
                [this.pathKey]: snapshot.ref.path
            };
        }
        else {
            return undefined;
        }
    }
    getGroupRef(constraints) {
        const group = collectionGroup(this.db, this.groupId);
        if (!arguments.length)
            return group;
        if (!constraints)
            return;
        return query(group, ...constraints);
    }
    /** Observable the content of group reference(s)  */
    fromGroupRef(ref) {
        if (isPlatformServer(this.platformId)) {
            return this.zone.runOutsideAngular(() => from(this.getFromRef(ref))).pipe(keepUnstableUntilFirst(this.zone));
        }
        return this.useCache(ref);
    }
    async getValue(idOrQuery, params) {
        // If array is empty
        if (Array.isArray(idOrQuery) && !idOrQuery.length)
            return [];
        // Group query
        const isEmpty = arguments.length === 0;
        const isGroupQuery = arguments.length === 1 && Array.isArray(idOrQuery) && !isIdList(idOrQuery);
        // Collection Query
        const ref = (isEmpty || isGroupQuery)
            ? this.getGroupRef(...arguments)
            : this.getRef(...arguments);
        if (!ref)
            return;
        return this.getFromRef(ref);
    }
    async reload(idOrQuery, params) {
        const isEmpty = arguments.length === 0;
        const isGroupQuery = arguments.length === 1 && Array.isArray(idOrQuery) && !isIdList(idOrQuery);
        const ref = (isEmpty || isGroupQuery)
            ? this.getGroupRef(...arguments)
            : this.getRef(...arguments);
        if (!ref)
            return;
        if (this.memorize) {
            Array.isArray(ref)
                ? ref.forEach(r => this.clearCache(r))
                : this.clearCache(ref);
        }
        return this.load(...arguments);
    }
    load() {
        return firstValueFrom(this.valueChanges(...arguments));
    }
    valueChanges(idOrQuery, params) {
        // If array is empty
        if (Array.isArray(idOrQuery) && !idOrQuery.length)
            return of([]);
        // Check if group query
        const isEmpty = arguments.length === 0;
        const isGroupQuery = arguments.length === 1 && Array.isArray(idOrQuery) && !isIdList(idOrQuery);
        // Group or Collection Query
        const ref = (isEmpty || isGroupQuery)
            ? this.getGroupRef(...arguments)
            : this.getRef(...arguments);
        if (!ref)
            return of(undefined);
        return this.fromRef(ref);
    }
}
//# sourceMappingURL=data:application/json;base64,