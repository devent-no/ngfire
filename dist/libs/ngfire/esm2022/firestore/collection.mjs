/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { inject, NgZone, PLATFORM_ID } from '@angular/core';
import { writeBatch, runTransaction, doc, collection, getDocs, getDoc, Transaction, DocumentSnapshot } from 'firebase/firestore';
import { fromRef } from './operators';
import { keepUnstableUntilFirst, isIdList, isNotUndefined, isPathRef, isQuery, pathWithParams } from 'ngfire/core';
import { of, combineLatest, firstValueFrom } from 'rxjs';
import { map, tap, startWith } from 'rxjs/operators';
import { isPlatformServer } from '@angular/common';
import { FirestoreService } from './firestore';
import { toDate, getDocPath } from './utils';
/////////////
// SERVICE //
/////////////
export class FireCollection {
    constructor() {
        this.platformId = inject(PLATFORM_ID);
        this.zone = inject(NgZone);
        this.firestore = inject(FirestoreService);
        this.idKey = 'id';
        /** If true, will store the document id (IdKey) onto the document */
        this.storeId = false;
        /**
         * Cache the snapshot into a global store
         */
        this.memorize = false;
        /**
         * Delay before unsubscribing to a query (used only with memorized is true)
         * Use Infinty for application long subscription
         */
        this.delayToUnsubscribe = 0;
    }
    get db() {
        return this.firestore.db;
    }
    useCache(ref) {
        if (isPlatformServer(this.platformId)) {
            return this.zone.runOutsideAngular(() => fromRef(ref)).pipe(map(snap => this.snapToData(snap)), tap(value => this.firestore.setTransfer(ref, value)), keepUnstableUntilFirst(this.zone));
        }
        if (!this.memorize) {
            return this.zone.runOutsideAngular(() => fromRef(ref)).pipe(map(snap => this.snapToData(snap)), keepUnstableUntilFirst(this.zone));
        }
        const transfer = this.firestore.getTransfer(ref);
        const initial = this.firestore.getState(ref);
        const snap$ = this.zone.runOutsideAngular(() => this.firestore.fromMemory(ref, this.delayToUnsubscribe)).pipe(tap(snap => this.firestore.setState(ref, snap)), keepUnstableUntilFirst(this.zone));
        if (transfer)
            return snap$.pipe(map(snap => this.snapToData(snap)), startWith(transfer));
        if (initial)
            return snap$.pipe(startWith(initial), map(snap => this.snapToData(snap)));
        return snap$.pipe(map(snap => this.snapToData(snap)));
    }
    clearCache(refs) {
        if (Array.isArray(refs))
            return this.firestore.clearCache(refs.map(ref => ref.path));
        if (isQuery(refs))
            return this.firestore.clearCache(refs);
        return this.firestore.clearCache(refs?.path);
    }
    /** Function triggered when adding/updating data to firestore */
    toFirestore(entity, actionType) {
        if (actionType === 'add') {
            const _meta = { createdAt: new Date(), modifiedAt: new Date() };
            return { _meta, ...entity };
        }
        else {
            return { ...entity, '_meta.modifiedAt': new Date() };
        }
    }
    /** Function triggered when getting data from firestore */
    fromFirestore(snapshot) {
        if (snapshot.exists()) {
            return { ...toDate(snapshot.data()), [this.idKey]: snapshot.id };
        }
        else {
            return undefined;
        }
    }
    batch() {
        return writeBatch(this.db);
    }
    runTransaction(cb) {
        return runTransaction(this.db, (tx) => cb(tx));
    }
    createId() {
        return doc(collection(this.db, '__')).id;
    }
    snapToData(snap) {
        if (snap instanceof DocumentSnapshot)
            return this.fromFirestore(snap);
        const snaps = Array.isArray(snap) ? snap : snap.docs;
        return snaps.map(s => this.snapToData(s)).filter(isNotUndefined);
    }
    async getFromRef(ref) {
        if (Array.isArray(ref))
            return Promise.all(ref.map(getDoc)).then(snaps => this.snapToData(snaps));
        const snap = (ref.type === 'document') ? await getDoc(ref) : await getDocs(ref);
        return this.snapToData(snap);
    }
    fromRef(ref) {
        if (Array.isArray(ref)) {
            if (!ref.length)
                return of([]);
            const queries = ref.map(r => this.useCache(r));
            return combineLatest(queries);
        }
        else {
            return this.useCache(ref);
        }
    }
    getRef(ids, parameters) {
        // Collection
        if (!arguments.length)
            return this.firestore.getRef(this.path);
        // Id is undefined or null
        if (!ids)
            return undefined;
        if (Array.isArray(ids)) {
            // List of ref
            if (ids.every(isPathRef))
                return this.firestore.getRef(ids);
            const path = pathWithParams(this.path, parameters);
            // List of ids
            if (isIdList(ids))
                return this.firestore.getRef(ids.map((id) => getDocPath(path, id)));
            // List of constraints
            return this.firestore.getRef(path, ids);
        }
        if (typeof ids === 'string') {
            // Ref
            if (isPathRef(ids))
                return this.firestore.getRef(ids);
            // Id
            const path = pathWithParams(this.path, parameters);
            return this.firestore.getRef(getDocPath(path, ids));
        }
        // Subcollection
        return this.firestore.getRef(pathWithParams(this.path, ids));
    }
    async reload() {
        if (!this.memorize)
            return;
        const ref = this.getRef(...arguments);
        if (!ref)
            return;
        this.clearCache(ref);
        return this.load(...arguments);
    }
    async load() {
        return firstValueFrom(this.valueChanges(...arguments));
    }
    async getValue() {
        const ref = this.getRef(...arguments);
        if (!ref)
            return;
        return this.getFromRef(ref);
    }
    valueChanges(idOrQuery) {
        if (Array.isArray(idOrQuery) && !idOrQuery.length)
            return of([]);
        const ref = this.getRef(...arguments);
        if (!ref)
            return of(undefined);
        return this.fromRef(ref);
    }
    async upsert(documents, options = {}) {
        const doesExist = async (doc) => {
            const id = doc[this.idKey];
            if (typeof id !== 'string')
                return false;
            const ref = this.getRef(id, options.params);
            const snap = (options.write instanceof Transaction)
                ? await options.write?.get(ref)
                : await getDoc(ref);
            return snap.exists();
        };
        const upsert = async (doc) => {
            const exists = await doesExist(doc);
            if (!exists)
                return this.add(doc, options);
            await this.update(doc, options);
            return doc[this.idKey];
        };
        return Array.isArray(documents)
            ? Promise.all(documents.map(upsert))
            : upsert(documents);
    }
    async add(documents, options = {}) {
        const docs = Array.isArray(documents) ? documents : [documents];
        const { write = this.batch(), ctx } = options;
        const operations = docs.map(async (value) => {
            const id = value[this.idKey] || this.createId();
            const data = await this.toFirestore(value, 'add');
            if (this.storeId)
                data[this.idKey] = id;
            const ref = this.getRef(id, options.params);
            write.set(ref, data);
            if (this.onCreate) {
                await this.onCreate(data, { write, ctx });
            }
            return id;
        });
        const ids = await Promise.all(operations);
        // If there is no atomic write provided
        if (!options.write) {
            await write.commit();
        }
        return Array.isArray(documents) ? ids : ids[0];
    }
    /**
     * Remove one or several document from Firestore
     * @param id A unique or list of id representing the document
     * @param options options to write the document on firestore
     */
    async remove(id, options = {}) {
        const { write = this.batch(), ctx } = options;
        const ids = Array.isArray(id) ? id : [id];
        const refs = [];
        const operations = ids.map(async (docId) => {
            const ref = this.getRef(docId, options.params);
            write.delete(ref);
            if (this.onDelete) {
                await this.onDelete(docId, { write, ctx });
            }
            refs.push(ref);
        });
        await Promise.all(operations);
        // If there is no atomic write provided
        if (!options.write) {
            await write.commit();
            if (this.memorize)
                this.clearCache(refs);
        }
    }
    /** Remove all document of the collection */
    async removeAll(options = {}) {
        const ref = options.params ? this.getRef(options.params) : this.getRef();
        const snapshot = await getDocs(ref);
        const ids = snapshot.docs.map((doc) => doc.id);
        await this.remove(ids, options);
        if (this.memorize)
            this.clearCache(ref);
    }
    async update(idsOrEntity, stateFnOrWrite, options = {}) {
        let ids = [];
        let stateFunction;
        let getData;
        const isEntity = (value) => {
            return typeof value === 'object' && value[this.idKey];
        };
        const isEntityArray = (values) => {
            return Array.isArray(values) && values.every((value) => isEntity(value));
        };
        if (isEntity(idsOrEntity)) {
            ids = [idsOrEntity[this.idKey]];
            getData = () => idsOrEntity;
            options = stateFnOrWrite || {};
        }
        else if (isEntityArray(idsOrEntity)) {
            const entityMap = new Map(idsOrEntity.map((entity) => [entity[this.idKey], entity]));
            ids = Array.from(entityMap.keys());
            getData = (docId) => entityMap.get(docId);
            options = stateFnOrWrite || {};
        }
        else if (typeof stateFnOrWrite === 'function') {
            ids = Array.isArray(idsOrEntity) ? idsOrEntity : [idsOrEntity];
            stateFunction = stateFnOrWrite;
        }
        else if (typeof stateFnOrWrite === 'object') {
            ids = Array.isArray(idsOrEntity) ? idsOrEntity : [idsOrEntity];
            getData = () => stateFnOrWrite;
        }
        else {
            throw new Error('Passed parameters match none of the function signatures.');
        }
        const { ctx } = options;
        if (!Array.isArray(ids) || !ids.length) {
            return;
        }
        // If update depends on the entity, use transaction
        if (stateFunction) {
            let refs = [];
            await runTransaction(this.db, async (tx) => {
                refs = [];
                const operations = ids.map(async (id) => {
                    const ref = this.getRef(id, options.params);
                    refs.push(ref);
                    const snapshot = await tx.get(ref);
                    const doc = this.fromFirestore(snapshot);
                    if (doc && stateFunction) {
                        const data = await stateFunction(doc, tx);
                        const result = await this.toFirestore(data, 'update');
                        tx.update(ref, result);
                        if (this.onUpdate) {
                            await this.onUpdate(data, { write: tx, ctx });
                        }
                    }
                    return tx;
                });
                return Promise.all(operations);
            });
            if (this.memorize)
                this.clearCache(refs);
        }
        else {
            const { write = this.batch() } = options;
            const refs = [];
            const operations = ids.map(async (docId) => {
                const doc = getData(docId);
                if (!docId) {
                    throw new Error(`Document should have an unique id to be updated, but none was found in ${doc}`);
                }
                const ref = this.getRef(docId, options.params);
                refs.push(ref);
                const data = await this.toFirestore(doc, 'update');
                write.update(ref, data);
                if (this.onUpdate) {
                    await this.onUpdate(doc, { write, ctx });
                }
            });
            await Promise.all(operations);
            // If there is no atomic write provided
            if (!options.write) {
                await write.commit();
                if (this.memorize)
                    this.clearCache(refs);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,