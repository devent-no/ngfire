import { inject, Injectable, InjectFlags, Injector, PLATFORM_ID } from "@angular/core";
import { makeStateKey, TransferState } from "@angular/core";
import { collection, doc, query, runTransaction, writeBatch } from 'firebase/firestore';
import { FIRESTORE } from "./tokens";
import { shareWithDelay, assertCollection, assertPath, isCollectionRef, isDocPath, isQuery } from "ngfire/core";
import { fromRef } from "./operators";
import { isPlatformBrowser, isPlatformServer } from "@angular/common";
import { stringifyQuery } from "./query";
import * as i0 from "@angular/core";
export class FirestoreService {
    constructor() {
        this.memoryRef = {};
        this.injector = inject(Injector);
        this.plateformId = inject(PLATFORM_ID);
        /** Transfer state between server and  */
        this.transferState = inject(TransferState, InjectFlags.Optional);
        /** Cache based state for document */
        this.state = new Map();
    }
    get db() {
        return this.injector.get(FIRESTORE);
    }
    /** @internal Should only be used by FireCollection services */
    setState(ref, snap) {
        if (isCollectionRef(ref)) {
            snap.forEach(doc => this.state.set(doc.ref.path, doc));
            this.state.set(ref.path, snap);
        }
        else if (isQuery(ref)) {
            snap.forEach(doc => this.state.set(doc.ref.path, doc));
            const key = stringifyQuery(ref);
            this.state.set(key, snap);
        }
        else {
            this.state.set(ref.path, snap);
        }
    }
    getState(ref) {
        if (isQuery(ref)) {
            const key = stringifyQuery(ref);
            return this.state.get(key);
        }
        else {
            return this.state.get(ref.path);
        }
    }
    fromMemory(ref, delay) {
        const key = isQuery(ref) ? stringifyQuery(ref) : ref.path;
        if (!this.memoryRef[key]) {
            this.memoryRef[key] = fromRef(ref).pipe(shareWithDelay(delay));
        }
        return this.memoryRef[key];
    }
    getTransfer(ref) {
        if (!this.transferState || !isPlatformBrowser(this.plateformId))
            return;
        const key = isQuery(ref) ? stringifyQuery(ref) : ref.path;
        const stateKey = makeStateKey(key);
        if (!this.transferState.hasKey(stateKey))
            return;
        const value = this.transferState.get(stateKey, undefined);
        this.transferState.remove(stateKey);
        return value;
    }
    setTransfer(ref, value) {
        if (!value)
            return;
        if (!this.transferState || !isPlatformServer(this.plateformId))
            return;
        if (Array.isArray(ref) && Array.isArray(value)) {
            ref.forEach((reference, i) => this.setTransfer(reference, value[i]));
        }
        else if (!Array.isArray(ref)) {
            const key = isQuery(ref) ? stringifyQuery(ref) : ref.path;
            this.transferState.set(makeStateKey(key), value);
        }
    }
    clearCache(paths) {
        if (!paths)
            return;
        if (Array.isArray(paths)) {
            for (const path of paths) {
                delete this.memoryRef[path];
                this.state.delete(path);
            }
        }
        else if (typeof paths === 'string') {
            delete this.memoryRef[paths];
            this.state.delete(paths);
        }
        else {
            const key = stringifyQuery(paths);
            delete this.memoryRef[key];
            this.state.delete(key);
        }
    }
    // overload used internally when looping over paths array
    getRef(paths, constraints) {
        if (!arguments.length || !paths)
            return undefined;
        // Array of docs
        if (Array.isArray(paths)) {
            return paths.map((path) => this.getRef(path));
        }
        const hasContraints = Array.isArray(constraints);
        if (hasContraints) {
            assertPath(paths);
            assertCollection(paths);
            const ref = collection(this.db, paths);
            return query(ref, ...constraints);
        }
        else {
            assertPath(paths);
            if (isDocPath(paths))
                return doc(this.db, paths);
            return collection(this.db, paths);
        }
    }
    batch() {
        return writeBatch(this.db);
    }
    runTransaction(cb) {
        return runTransaction(this.db, (tx) => cb(tx));
    }
    createId() {
        return doc(collection(this.db, '__')).id;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: FirestoreService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: FirestoreService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.4", ngImport: i0, type: FirestoreService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,