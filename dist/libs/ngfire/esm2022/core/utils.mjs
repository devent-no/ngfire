export function exist(doc) {
    return doc !== undefined && doc !== null;
}
export function isNotUndefined(doc) {
    return doc !== undefined;
}
//////////
// PATH //
//////////
export function isDocPath(path) {
    return path.split('/').length % 2 === 0;
}
// Check if a string is a full path
export function isPathRef(path) {
    return !!((typeof path === "string") && (path.split('/').length > 1) && !path.includes(':'));
}
export function isIdList(idsOrQuery) {
    return idsOrQuery.every(id => typeof id === 'string');
}
/** Get the params from a path */
export function getPathParams(path) {
    return path
        .split('/')
        .filter((segment) => segment.charAt(0) === ':')
        .map((segment) => segment.substring(1));
}
export function assertPath(path) {
    for (const segment of path.split('/')) {
        if (segment.charAt(0) === ':') {
            const key = segment.substring(1);
            throw new Error(`Required parameter ${key} from ${path} has not been provided`);
        }
    }
}
export function assertCollection(path) {
    if (isDocPath(path)) {
        throw new Error(`Expected collection path but got: ${path}`);
    }
}
/**
 * Transform a path based on the params
 * @param path The path with params starting with "/:"
 * @param params A map of id params
 * @example pathWithParams('movies/:movieId/stakeholder/:shId', { movieId, shId })
 */
export function pathWithParams(path, params) {
    if (!params)
        return path;
    if (!path.includes(':'))
        return path;
    return path
        .split('/')
        .map((segment) => {
        if (segment.charAt(0) === ':') {
            const key = segment.substr(1);
            return params[key] || segment;
        }
        else {
            return segment;
        }
    })
        .join('/');
}
////////////////
// REFERENCES //
////////////////
export function isQuery(ref) {
    return ref.type === 'query';
}
export function isCollectionRef(ref) {
    return ref.type === 'collection';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nZmlyZS9jb3JlL3NyYy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLFVBQVUsS0FBSyxDQUFJLEdBQXlCO0lBQ2hELE9BQU8sR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDO0FBQzNDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFJLEdBQWtCO0lBQ2xELE9BQU8sR0FBRyxLQUFLLFNBQVMsQ0FBQztBQUMzQixDQUFDO0FBR0QsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsTUFBTSxVQUFVLFNBQVMsQ0FBQyxJQUFZO0lBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBRUQsbUNBQW1DO0FBQ25DLE1BQU0sVUFBVSxTQUFTLENBQUMsSUFBVTtJQUNsQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMvRixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxVQUFpQjtJQUN4QyxPQUFRLFVBQW9CLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssUUFBUSxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVELGlDQUFpQztBQUNqQyxNQUFNLFVBQVUsYUFBYSxDQUFDLElBQVk7SUFDeEMsT0FBTyxJQUFJO1NBQ1IsS0FBSyxDQUFDLEdBQUcsQ0FBQztTQUNWLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUM7U0FDOUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUdELE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBWTtJQUNyQyxLQUFLLE1BQU0sT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUN0QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7WUFDOUIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixHQUFHLFNBQVMsSUFBSSx3QkFBd0IsQ0FBQyxDQUFDO1FBQ2xGLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxJQUFZO0lBQzNDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0FBQ0gsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxJQUFZLEVBQUUsTUFBZTtJQUMxRCxJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3JDLE9BQU8sSUFBSTtTQUNSLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDVixHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNmLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUM5QixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQztRQUNoQyxDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUM7SUFDSCxDQUFDLENBQUM7U0FDRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDZixDQUFDO0FBRUQsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQixnQkFBZ0I7QUFDaEIsTUFBTSxVQUFVLE9BQU8sQ0FBSSxHQUE2RDtJQUN0RixPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDO0FBQzlCLENBQUM7QUFDRCxNQUFNLFVBQVUsZUFBZSxDQUFJLEdBQTZEO0lBQzlGLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxZQUFZLENBQUM7QUFDbkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ29sbGVjdGlvblJlZmVyZW5jZSwgRG9jdW1lbnRSZWZlcmVuY2UsIFF1ZXJ5IH0gZnJvbSBcImZpcmViYXNlL2ZpcmVzdG9yZVwiO1xuaW1wb3J0IHsgUGFyYW1zIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4aXN0PEQ+KGRvYzogRCB8IHVuZGVmaW5lZCB8IG51bGwpOiBkb2MgaXMgRCB7XG4gIHJldHVybiBkb2MgIT09IHVuZGVmaW5lZCAmJiBkb2MgIT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vdFVuZGVmaW5lZDxEPihkb2M6IEQgfCB1bmRlZmluZWQpOiBkb2MgaXMgRCB7XG4gIHJldHVybiBkb2MgIT09IHVuZGVmaW5lZDtcbn1cblxuXG4vLy8vLy8vLy8vXG4vLyBQQVRIIC8vXG4vLy8vLy8vLy8vXG5leHBvcnQgZnVuY3Rpb24gaXNEb2NQYXRoKHBhdGg6IHN0cmluZykge1xuICByZXR1cm4gcGF0aC5zcGxpdCgnLycpLmxlbmd0aCAlIDIgPT09IDA7XG59IFxuXG4vLyBDaGVjayBpZiBhIHN0cmluZyBpcyBhIGZ1bGwgcGF0aFxuZXhwb3J0IGZ1bmN0aW9uIGlzUGF0aFJlZihwYXRoPzogYW55KTogcGF0aCBpcyBzdHJpbmcge1xuICByZXR1cm4gISEoKHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiKSAmJiAocGF0aC5zcGxpdCgnLycpLmxlbmd0aCA+IDEpICYmICFwYXRoLmluY2x1ZGVzKCc6JykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJZExpc3QoaWRzT3JRdWVyeTogYW55W10pOiBpZHNPclF1ZXJ5IGlzIHN0cmluZ1tdIHtcbiAgcmV0dXJuIChpZHNPclF1ZXJ5IGFzIGFueVtdKS5ldmVyeShpZCA9PiB0eXBlb2YgaWQgPT09ICdzdHJpbmcnKTtcbn1cblxuLyoqIEdldCB0aGUgcGFyYW1zIGZyb20gYSBwYXRoICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aFBhcmFtcyhwYXRoOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHBhdGhcbiAgICAuc3BsaXQoJy8nKVxuICAgIC5maWx0ZXIoKHNlZ21lbnQpID0+IHNlZ21lbnQuY2hhckF0KDApID09PSAnOicpXG4gICAgLm1hcCgoc2VnbWVudCkgPT4gc2VnbWVudC5zdWJzdHJpbmcoMSkpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRQYXRoKHBhdGg6IHN0cmluZykge1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2YgcGF0aC5zcGxpdCgnLycpKSB7XG4gICAgaWYgKHNlZ21lbnQuY2hhckF0KDApID09PSAnOicpIHtcbiAgICAgIGNvbnN0IGtleSA9IHNlZ21lbnQuc3Vic3RyaW5nKDEpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZXF1aXJlZCBwYXJhbWV0ZXIgJHtrZXl9IGZyb20gJHtwYXRofSBoYXMgbm90IGJlZW4gcHJvdmlkZWRgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydENvbGxlY3Rpb24ocGF0aDogc3RyaW5nKSB7XG4gIGlmIChpc0RvY1BhdGgocGF0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGNvbGxlY3Rpb24gcGF0aCBidXQgZ290OiAke3BhdGh9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBwYXRoIGJhc2VkIG9uIHRoZSBwYXJhbXNcbiAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIHdpdGggcGFyYW1zIHN0YXJ0aW5nIHdpdGggXCIvOlwiXG4gKiBAcGFyYW0gcGFyYW1zIEEgbWFwIG9mIGlkIHBhcmFtc1xuICogQGV4YW1wbGUgcGF0aFdpdGhQYXJhbXMoJ21vdmllcy86bW92aWVJZC9zdGFrZWhvbGRlci86c2hJZCcsIHsgbW92aWVJZCwgc2hJZCB9KVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGF0aFdpdGhQYXJhbXMocGF0aDogc3RyaW5nLCBwYXJhbXM/OiBQYXJhbXMpOiBzdHJpbmcge1xuICBpZiAoIXBhcmFtcykgcmV0dXJuIHBhdGg7XG4gIGlmICghcGF0aC5pbmNsdWRlcygnOicpKSByZXR1cm4gcGF0aDtcbiAgcmV0dXJuIHBhdGhcbiAgICAuc3BsaXQoJy8nKVxuICAgIC5tYXAoKHNlZ21lbnQpID0+IHtcbiAgICAgIGlmIChzZWdtZW50LmNoYXJBdCgwKSA9PT0gJzonKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHNlZ21lbnQuc3Vic3RyKDEpO1xuICAgICAgICByZXR1cm4gcGFyYW1zW2tleV0gfHwgc2VnbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzZWdtZW50O1xuICAgICAgfVxuICAgIH0pXG4gICAgLmpvaW4oJy8nKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vL1xuLy8gUkVGRVJFTkNFUyAvL1xuLy8vLy8vLy8vLy8vLy8vL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUXVlcnk8RT4ocmVmOiBDb2xsZWN0aW9uUmVmZXJlbmNlPEU+IHwgRG9jdW1lbnRSZWZlcmVuY2U8RT4gfCBRdWVyeTxFPik6IHJlZiBpcyBRdWVyeTxFPiB7XG4gIHJldHVybiByZWYudHlwZSA9PT0gJ3F1ZXJ5Jztcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbGxlY3Rpb25SZWY8RT4ocmVmOiBDb2xsZWN0aW9uUmVmZXJlbmNlPEU+IHwgRG9jdW1lbnRSZWZlcmVuY2U8RT4gfCBRdWVyeTxFPik6IHJlZiBpcyBDb2xsZWN0aW9uUmVmZXJlbmNlPEU+IHtcbiAgcmV0dXJuIHJlZi50eXBlID09PSAnY29sbGVjdGlvbic7XG59Il19