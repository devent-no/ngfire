import { inject, Injectable, Injector } from "@angular/core";
import { QueryConstraint, ref as dbRef, remove, set, update, query as queryWithConstraints } from 'firebase/database';
import { assertPath, pathWithParams } from "ngfire/core";
import { fromQuery } from "./operators";
import { DATABASE } from "./tokens";
import * as i0 from "@angular/core";
export function isContraintList(idsOrQuery) {
    return idsOrQuery.every(query => query instanceof QueryConstraint);
}
export class FireDatabase {
    constructor() {
        this.injector = inject(Injector);
        this.memory = new Map();
    }
    get db() {
        return this.injector.get(DATABASE);
    }
    getRef(paths, paramsOrConstraints, params) {
        if (!arguments.length || !paths)
            return undefined;
        const hasContraints = Array.isArray(paramsOrConstraints);
        if (Array.isArray(paths)) {
            return paths.map((path) => this.getRef(path, paramsOrConstraints, params));
        }
        if (hasContraints) {
            const path = pathWithParams(paths, params);
            assertPath(path);
            const ref = dbRef(this.db, path);
            return queryWithConstraints(ref, ...paramsOrConstraints);
        }
        else {
            const path = pathWithParams(paths, paramsOrConstraints);
            assertPath(path);
            return dbRef(this.db, path);
        }
    }
    fromQuery(query) {
        let existing = null;
        for (const [key, value] of this.memory.entries()) {
            if (query.isEqual(key)) {
                existing = value;
                break;
            }
        }
        if (existing)
            return existing;
        this.memory.set(query, fromQuery(query));
        return this.memory.get(query);
    }
    create(path, content) {
        return set(this.getRef(path), content);
    }
    update(path, value) {
        const ref = this.getRef(path);
        return update(ref, value);
    }
    remove(path) {
        const ref = this.getRef(path);
        return remove(ref);
    }
}
FireDatabase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: FireDatabase, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
FireDatabase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: FireDatabase, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: FireDatabase, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nZmlyZS9kYXRhYmFzZS9zcmMvZGF0YWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxlQUFlLEVBQUUsR0FBRyxJQUFJLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLElBQUksb0JBQW9CLEVBQWdCLE1BQU0sbUJBQW1CLENBQUM7QUFHcEksT0FBTyxFQUFVLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDOztBQUdwQyxNQUFNLFVBQVUsZUFBZSxDQUFDLFVBQWlCO0lBQy9DLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssWUFBWSxlQUFlLENBQUMsQ0FBQztBQUNyRSxDQUFDO0FBR0QsTUFBTSxPQUFPLFlBQVk7SUFEekI7UUFFWSxhQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVCLFdBQU0sR0FBRyxJQUFJLEdBQUcsRUFBbUMsQ0FBQztLQStEL0Q7SUE3REMsSUFBSSxFQUFFO1FBQ0osT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBU00sTUFBTSxDQUNYLEtBQXdCLEVBQ3hCLG1CQUFnRCxFQUNoRCxNQUFlO1FBRWYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxLQUFLO1lBQUUsT0FBTyxTQUFTLENBQUM7UUFDbEQsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRXpELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDNUU7UUFFRCxJQUFJLGFBQWEsRUFBRTtZQUNqQixNQUFNLElBQUksR0FBRyxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzNDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNqQyxPQUFPLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxHQUFHLG1CQUFtQixDQUFDLENBQUM7U0FDMUQ7YUFBTTtZQUNMLE1BQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQyxLQUFLLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztZQUN4RCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM3QjtJQUNILENBQUM7SUFFRCxTQUFTLENBQUMsS0FBWTtRQUNwQixJQUFJLFFBQVEsR0FBb0MsSUFBSSxDQUFDO1FBQ3JELEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2hELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDdEIsUUFBUSxHQUFHLEtBQUssQ0FBQztnQkFDakIsTUFBTTthQUNQO1NBQ0Y7UUFDRCxJQUFJLFFBQVE7WUFBRSxPQUFPLFFBQVEsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDekMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQTZCLENBQUM7SUFDNUQsQ0FBQztJQUVELE1BQU0sQ0FBSSxJQUFZLEVBQUUsT0FBVTtRQUNoQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxNQUFNLENBQUksSUFBWSxFQUFFLEtBQWlCO1FBQ3ZDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsT0FBTyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBWTtRQUNqQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7OzBHQWhFVSxZQUFZOzhHQUFaLFlBQVksY0FEQyxNQUFNOzRGQUNuQixZQUFZO2tCQUR4QixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgUXVlcnlDb25zdHJhaW50LCByZWYgYXMgZGJSZWYsIHJlbW92ZSwgc2V0LCB1cGRhdGUsIHF1ZXJ5IGFzIHF1ZXJ5V2l0aENvbnN0cmFpbnRzLCBEYXRhU25hcHNob3QgfSBmcm9tICdmaXJlYmFzZS9kYXRhYmFzZSc7XG5pbXBvcnQgdHlwZSB7IERhdGFiYXNlUmVmZXJlbmNlLCBRdWVyeSB9IGZyb20gJ2ZpcmViYXNlL2RhdGFiYXNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgUGFyYW1zLCBhc3NlcnRQYXRoLCBwYXRoV2l0aFBhcmFtcyB9IGZyb20gXCJuZ2ZpcmUvY29yZVwiO1xuaW1wb3J0IHsgZnJvbVF1ZXJ5IH0gZnJvbSBcIi4vb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBEQVRBQkFTRSB9IGZyb20gXCIuL3Rva2Vuc1wiO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbnRyYWludExpc3QoaWRzT3JRdWVyeTogYW55W10pOiBpZHNPclF1ZXJ5IGlzIFF1ZXJ5Q29uc3RyYWludFtdIHtcbiAgcmV0dXJuIGlkc09yUXVlcnkuZXZlcnkocXVlcnkgPT4gcXVlcnkgaW5zdGFuY2VvZiBRdWVyeUNvbnN0cmFpbnQpO1xufVxuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEZpcmVEYXRhYmFzZSB7XG4gIHByb3RlY3RlZCBpbmplY3RvciA9IGluamVjdChJbmplY3Rvcik7XG4gIHByb3RlY3RlZCBtZW1vcnkgPSBuZXcgTWFwPFF1ZXJ5LCBPYnNlcnZhYmxlPERhdGFTbmFwc2hvdD4+KCk7XG5cbiAgZ2V0IGRiKCkge1xuICAgIHJldHVybiB0aGlzLmluamVjdG9yLmdldChEQVRBQkFTRSk7XG4gIH1cblxuICAvKiogR2V0IHRoZSByZWZlcmVuY2Ugb2YgdGhlIGRvY3VtZW50LCBjb2xsZWN0aW9uIG9yIHF1ZXJ5ICovXG4gIHB1YmxpYyBnZXRSZWYocGF0aDogc3RyaW5nLCBwYXJhbXM/OiBQYXJhbXMpOiBEYXRhYmFzZVJlZmVyZW5jZTtcbiAgcHVibGljIGdldFJlZihwYXRoczogc3RyaW5nW10sIHBhcmFtcz86IFBhcmFtcyk6IERhdGFiYXNlUmVmZXJlbmNlW107XG4gIHB1YmxpYyBnZXRSZWYocGF0aDogc3RyaW5nLCBjb25zdHJhaW50czogUXVlcnlDb25zdHJhaW50W10sIHBhcmFtcz86IFBhcmFtcyk6IFF1ZXJ5O1xuICBwdWJsaWMgZ2V0UmVmKHBhdGhzOiBzdHJpbmdbXSwgY29uc3RyYWludHM6IFF1ZXJ5Q29uc3RyYWludFtdLCBwYXJhbXM/OiBQYXJhbXMpOiBRdWVyeTtcbiAgLy8gb3ZlcmxvYWQgdXNlZCBpbnRlcm5hbGx5IHdoZW4gbG9vcGluZyBvdmVyIHBhdGhzIGFycmF5XG4gIHB1YmxpYyBnZXRSZWYocGF0aHM6IHN0cmluZywgY29uc3RyYWludHM/OiBQYXJhbXMgfCBRdWVyeUNvbnN0cmFpbnRbXSwgcGFyYW1zPzogUGFyYW1zKTogUXVlcnkgfCBEYXRhYmFzZVJlZmVyZW5jZTtcbiAgcHVibGljIGdldFJlZihcbiAgICBwYXRoczogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgcGFyYW1zT3JDb25zdHJhaW50cz86IFBhcmFtcyB8IFF1ZXJ5Q29uc3RyYWludFtdLFxuICAgIHBhcmFtcz86IFBhcmFtc1xuICApOiB1bmRlZmluZWQgfCBRdWVyeSB8IFF1ZXJ5W10gfCBEYXRhYmFzZVJlZmVyZW5jZSB8IERhdGFiYXNlUmVmZXJlbmNlW10ge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCB8fCAhcGF0aHMpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgaGFzQ29udHJhaW50cyA9IEFycmF5LmlzQXJyYXkocGFyYW1zT3JDb25zdHJhaW50cyk7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShwYXRocykpIHtcbiAgICAgIHJldHVybiBwYXRocy5tYXAoKHBhdGgpID0+IHRoaXMuZ2V0UmVmKHBhdGgsIHBhcmFtc09yQ29uc3RyYWludHMsIHBhcmFtcykpO1xuICAgIH1cblxuICAgIGlmIChoYXNDb250cmFpbnRzKSB7XG4gICAgICBjb25zdCBwYXRoID0gcGF0aFdpdGhQYXJhbXMocGF0aHMsIHBhcmFtcyk7XG4gICAgICBhc3NlcnRQYXRoKHBhdGgpO1xuICAgICAgY29uc3QgcmVmID0gZGJSZWYodGhpcy5kYiwgcGF0aCk7XG4gICAgICByZXR1cm4gcXVlcnlXaXRoQ29uc3RyYWludHMocmVmLCAuLi5wYXJhbXNPckNvbnN0cmFpbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcGF0aCA9IHBhdGhXaXRoUGFyYW1zKHBhdGhzLCBwYXJhbXNPckNvbnN0cmFpbnRzKTtcbiAgICAgIGFzc2VydFBhdGgocGF0aCk7XG4gICAgICByZXR1cm4gZGJSZWYodGhpcy5kYiwgcGF0aCk7XG4gICAgfVxuICB9XG5cbiAgZnJvbVF1ZXJ5KHF1ZXJ5OiBRdWVyeSkge1xuICAgIGxldCBleGlzdGluZzogT2JzZXJ2YWJsZTxEYXRhU25hcHNob3Q+IHwgbnVsbCA9IG51bGw7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5tZW1vcnkuZW50cmllcygpKSB7XG4gICAgICBpZiAocXVlcnkuaXNFcXVhbChrZXkpKSB7XG4gICAgICAgIGV4aXN0aW5nID0gdmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXhpc3RpbmcpIHJldHVybiBleGlzdGluZztcbiAgICB0aGlzLm1lbW9yeS5zZXQocXVlcnksIGZyb21RdWVyeShxdWVyeSkpO1xuICAgIHJldHVybiB0aGlzLm1lbW9yeS5nZXQocXVlcnkpIGFzIE9ic2VydmFibGU8RGF0YVNuYXBzaG90PjtcbiAgfVxuXG4gIGNyZWF0ZTxUPihwYXRoOiBzdHJpbmcsIGNvbnRlbnQ6IFQpIHtcbiAgICByZXR1cm4gc2V0KHRoaXMuZ2V0UmVmKHBhdGgpLCBjb250ZW50KTtcbiAgfVxuXG4gIHVwZGF0ZTxUPihwYXRoOiBzdHJpbmcsIHZhbHVlOiBQYXJ0aWFsPFQ+KSB7XG4gICAgY29uc3QgcmVmID0gdGhpcy5nZXRSZWYocGF0aCk7XG4gICAgcmV0dXJuIHVwZGF0ZShyZWYsIHZhbHVlKTtcbiAgfVxuXG4gIHJlbW92ZShwYXRoOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZWYgPSB0aGlzLmdldFJlZihwYXRoKTtcbiAgICByZXR1cm4gcmVtb3ZlKHJlZik7XG4gIH1cbn1cbiJdfQ==