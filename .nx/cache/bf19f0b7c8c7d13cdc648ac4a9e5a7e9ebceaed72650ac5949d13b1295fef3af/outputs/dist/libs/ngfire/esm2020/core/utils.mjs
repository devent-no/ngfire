export function exist(doc) {
    return doc !== undefined && doc !== null;
}
export function isNotUndefined(doc) {
    return doc !== undefined;
}
//////////
// PATH //
//////////
export function isDocPath(path) {
    return path.split('/').length % 2 === 0;
}
// Check if a string is a full path
export function isPathRef(path) {
    return !!((typeof path === "string") && (path.split('/').length > 1) && !path.includes(':'));
}
export function isIdList(idsOrQuery) {
    return idsOrQuery.every(id => typeof id === 'string');
}
/** Get the params from a path */
export function getPathParams(path) {
    return path
        .split('/')
        .filter((segment) => segment.charAt(0) === ':')
        .map((segment) => segment.substring(1));
}
export function assertPath(path) {
    for (const segment of path.split('/')) {
        if (segment.charAt(0) === ':') {
            const key = segment.substring(1);
            throw new Error(`Required parameter ${key} from ${path} has not been provided`);
        }
    }
}
export function assertCollection(path) {
    if (isDocPath(path)) {
        throw new Error(`Expected collection path but got: ${path}`);
    }
}
/**
 * Transform a path based on the params
 * @param path The path with params starting with "/:"
 * @param params A map of id params
 * @example pathWithParams('movies/:movieId/stakeholder/:shId', { movieId, shId })
 */
export function pathWithParams(path, params) {
    if (!params)
        return path;
    if (!path.includes(':'))
        return path;
    return path
        .split('/')
        .map((segment) => {
        if (segment.charAt(0) === ':') {
            const key = segment.substr(1);
            return params[key] || segment;
        }
        else {
            return segment;
        }
    })
        .join('/');
}
////////////////
// REFERENCES //
////////////////
export function isQuery(ref) {
    return ref.type === 'query';
}
export function isCollectionRef(ref) {
    return ref.type === 'collection';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nZmlyZS9jb3JlL3NyYy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLFVBQVUsS0FBSyxDQUFJLEdBQXlCO0lBQ2hELE9BQU8sR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDO0FBQzNDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFJLEdBQWtCO0lBQ2xELE9BQU8sR0FBRyxLQUFLLFNBQVMsQ0FBQztBQUMzQixDQUFDO0FBR0QsVUFBVTtBQUNWLFVBQVU7QUFDVixVQUFVO0FBQ1YsTUFBTSxVQUFVLFNBQVMsQ0FBQyxJQUFZO0lBQ3BDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBRUQsbUNBQW1DO0FBQ25DLE1BQU0sVUFBVSxTQUFTLENBQUMsSUFBVTtJQUNsQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMvRixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxVQUFpQjtJQUN4QyxPQUFRLFVBQW9CLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEtBQUssUUFBUSxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVELGlDQUFpQztBQUNqQyxNQUFNLFVBQVUsYUFBYSxDQUFDLElBQVk7SUFDeEMsT0FBTyxJQUFJO1NBQ1IsS0FBSyxDQUFDLEdBQUcsQ0FBQztTQUNWLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUM7U0FDOUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUdELE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBWTtJQUNyQyxLQUFLLE1BQU0sT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDckMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUM3QixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLEdBQUcsU0FBUyxJQUFJLHdCQUF3QixDQUFDLENBQUM7U0FDakY7S0FDRjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsSUFBWTtJQUMzQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQzlEO0FBQ0gsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxJQUFZLEVBQUUsTUFBZTtJQUMxRCxJQUFJLENBQUMsTUFBTTtRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ3JDLE9BQU8sSUFBSTtTQUNSLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDVixHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNmLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDN0IsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUM7U0FDL0I7YUFBTTtZQUNMLE9BQU8sT0FBTyxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsQ0FBQztBQUVELGdCQUFnQjtBQUNoQixnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCLE1BQU0sVUFBVSxPQUFPLENBQUksR0FBNkQ7SUFDdEYsT0FBTyxHQUFHLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQztBQUM5QixDQUFDO0FBQ0QsTUFBTSxVQUFVLGVBQWUsQ0FBSSxHQUE2RDtJQUM5RixPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFDO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbGxlY3Rpb25SZWZlcmVuY2UsIERvY3VtZW50UmVmZXJlbmNlLCBRdWVyeSB9IGZyb20gXCJmaXJlYmFzZS9maXJlc3RvcmVcIjtcbmltcG9ydCB7IFBhcmFtcyB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBleGlzdDxEPihkb2M6IEQgfCB1bmRlZmluZWQgfCBudWxsKTogZG9jIGlzIEQge1xuICByZXR1cm4gZG9jICE9PSB1bmRlZmluZWQgJiYgZG9jICE9PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb3RVbmRlZmluZWQ8RD4oZG9jOiBEIHwgdW5kZWZpbmVkKTogZG9jIGlzIEQge1xuICByZXR1cm4gZG9jICE9PSB1bmRlZmluZWQ7XG59XG5cblxuLy8vLy8vLy8vL1xuLy8gUEFUSCAvL1xuLy8vLy8vLy8vL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRG9jUGF0aChwYXRoOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHBhdGguc3BsaXQoJy8nKS5sZW5ndGggJSAyID09PSAwO1xufSBcblxuLy8gQ2hlY2sgaWYgYSBzdHJpbmcgaXMgYSBmdWxsIHBhdGhcbmV4cG9ydCBmdW5jdGlvbiBpc1BhdGhSZWYocGF0aD86IGFueSk6IHBhdGggaXMgc3RyaW5nIHtcbiAgcmV0dXJuICEhKCh0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIikgJiYgKHBhdGguc3BsaXQoJy8nKS5sZW5ndGggPiAxKSAmJiAhcGF0aC5pbmNsdWRlcygnOicpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSWRMaXN0KGlkc09yUXVlcnk6IGFueVtdKTogaWRzT3JRdWVyeSBpcyBzdHJpbmdbXSB7XG4gIHJldHVybiAoaWRzT3JRdWVyeSBhcyBhbnlbXSkuZXZlcnkoaWQgPT4gdHlwZW9mIGlkID09PSAnc3RyaW5nJyk7XG59XG5cbi8qKiBHZXQgdGhlIHBhcmFtcyBmcm9tIGEgcGF0aCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdGhQYXJhbXMocGF0aDogc3RyaW5nKSB7XG4gIHJldHVybiBwYXRoXG4gICAgLnNwbGl0KCcvJylcbiAgICAuZmlsdGVyKChzZWdtZW50KSA9PiBzZWdtZW50LmNoYXJBdCgwKSA9PT0gJzonKVxuICAgIC5tYXAoKHNlZ21lbnQpID0+IHNlZ21lbnQuc3Vic3RyaW5nKDEpKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UGF0aChwYXRoOiBzdHJpbmcpIHtcbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHBhdGguc3BsaXQoJy8nKSkge1xuICAgIGlmIChzZWdtZW50LmNoYXJBdCgwKSA9PT0gJzonKSB7XG4gICAgICBjb25zdCBrZXkgPSBzZWdtZW50LnN1YnN0cmluZygxKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUmVxdWlyZWQgcGFyYW1ldGVyICR7a2V5fSBmcm9tICR7cGF0aH0gaGFzIG5vdCBiZWVuIHByb3ZpZGVkYCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRDb2xsZWN0aW9uKHBhdGg6IHN0cmluZykge1xuICBpZiAoaXNEb2NQYXRoKHBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBjb2xsZWN0aW9uIHBhdGggYnV0IGdvdDogJHtwYXRofWApO1xuICB9XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgcGF0aCBiYXNlZCBvbiB0aGUgcGFyYW1zXG4gKiBAcGFyYW0gcGF0aCBUaGUgcGF0aCB3aXRoIHBhcmFtcyBzdGFydGluZyB3aXRoIFwiLzpcIlxuICogQHBhcmFtIHBhcmFtcyBBIG1hcCBvZiBpZCBwYXJhbXNcbiAqIEBleGFtcGxlIHBhdGhXaXRoUGFyYW1zKCdtb3ZpZXMvOm1vdmllSWQvc3Rha2Vob2xkZXIvOnNoSWQnLCB7IG1vdmllSWQsIHNoSWQgfSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhdGhXaXRoUGFyYW1zKHBhdGg6IHN0cmluZywgcGFyYW1zPzogUGFyYW1zKTogc3RyaW5nIHtcbiAgaWYgKCFwYXJhbXMpIHJldHVybiBwYXRoO1xuICBpZiAoIXBhdGguaW5jbHVkZXMoJzonKSkgcmV0dXJuIHBhdGg7XG4gIHJldHVybiBwYXRoXG4gICAgLnNwbGl0KCcvJylcbiAgICAubWFwKChzZWdtZW50KSA9PiB7XG4gICAgICBpZiAoc2VnbWVudC5jaGFyQXQoMCkgPT09ICc6Jykge1xuICAgICAgICBjb25zdCBrZXkgPSBzZWdtZW50LnN1YnN0cigxKTtcbiAgICAgICAgcmV0dXJuIHBhcmFtc1trZXldIHx8IHNlZ21lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VnbWVudDtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5qb2luKCcvJyk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy9cbi8vIFJFRkVSRU5DRVMgLy9cbi8vLy8vLy8vLy8vLy8vLy9cbmV4cG9ydCBmdW5jdGlvbiBpc1F1ZXJ5PEU+KHJlZjogQ29sbGVjdGlvblJlZmVyZW5jZTxFPiB8IERvY3VtZW50UmVmZXJlbmNlPEU+IHwgUXVlcnk8RT4pOiByZWYgaXMgUXVlcnk8RT4ge1xuICByZXR1cm4gcmVmLnR5cGUgPT09ICdxdWVyeSc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNDb2xsZWN0aW9uUmVmPEU+KHJlZjogQ29sbGVjdGlvblJlZmVyZW5jZTxFPiB8IERvY3VtZW50UmVmZXJlbmNlPEU+IHwgUXVlcnk8RT4pOiByZWYgaXMgQ29sbGVjdGlvblJlZmVyZW5jZTxFPiB7XG4gIHJldHVybiByZWYudHlwZSA9PT0gJ2NvbGxlY3Rpb24nO1xufSJdfQ==