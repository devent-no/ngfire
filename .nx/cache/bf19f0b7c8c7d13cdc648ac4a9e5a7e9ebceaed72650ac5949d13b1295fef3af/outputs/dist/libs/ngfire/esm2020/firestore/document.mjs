/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { inject, NgZone, PLATFORM_ID } from '@angular/core';
import { writeBatch, runTransaction, getDoc, Transaction, setDoc, updateDoc } from 'firebase/firestore';
import { fromRef } from './operators';
import { keepUnstableUntilFirst, pathWithParams } from 'ngfire/core';
import { firstValueFrom } from 'rxjs';
import { tap, startWith, switchMap } from 'rxjs/operators';
import { isPlatformServer } from '@angular/common';
import { FirestoreService } from './firestore';
import { toDate } from './utils';
/////////////
// SERVICE //
/////////////
export class FireDocument {
    constructor() {
        this.platformId = inject(PLATFORM_ID);
        this.zone = inject(NgZone);
        this.firestore = inject(FirestoreService);
        this.idKey = 'id';
        /** If true, will store the document id (IdKey) onto the document */
        this.storeId = false;
        /**
         * Cache the snapshot into a global store
         */
        this.memorize = false;
        /**
         * Delay before unsubscribing to a query (used only with memorized is true)
         * Use Infinty for application long subscription
         */
        this.delayToUnsubscribe = 0;
    }
    get db() {
        return this.firestore.db;
    }
    useCache(ref) {
        if (isPlatformServer(this.platformId)) {
            return this.zone.runOutsideAngular(() => fromRef(ref)).pipe(switchMap(async (snap) => this.snapToData(snap)), tap(value => this.firestore.setTransfer(ref, value)), keepUnstableUntilFirst(this.zone));
        }
        if (!this.memorize) {
            return this.zone.runOutsideAngular(() => fromRef(ref)).pipe(switchMap(async (snap) => this.snapToData(snap)), keepUnstableUntilFirst(this.zone));
        }
        const transfer = this.firestore.getTransfer(ref);
        const initial = this.firestore.getState(ref);
        const snap$ = this.zone.runOutsideAngular(() => this.firestore.fromMemory(ref, this.delayToUnsubscribe)).pipe(tap(snap => this.firestore.setState(ref, snap)), keepUnstableUntilFirst(this.zone));
        if (transfer)
            return snap$.pipe(switchMap(async (snap) => this.snapToData(snap)), startWith(transfer));
        if (initial)
            return snap$.pipe(startWith(initial), switchMap(async (snap) => this.snapToData(snap)));
        return snap$.pipe(switchMap(async (snap) => this.snapToData(snap)));
    }
    clearCache(ref) {
        return this.firestore.clearCache(ref.path);
    }
    /** Function triggered when adding/updating data to firestore */
    toFirestore(entity, actionType) {
        if (actionType === 'create') {
            const _meta = { createdAt: new Date(), modifiedAt: new Date() };
            return { _meta, ...entity };
        }
        else {
            return { ...entity, '_meta.modifiedAt': new Date() };
        }
    }
    /** Function triggered when getting data from firestore */
    fromFirestore(snapshot) {
        if (snapshot.exists()) {
            return { ...toDate(snapshot.data()), [this.idKey]: snapshot.id };
        }
        else {
            return undefined;
        }
    }
    batch() {
        return writeBatch(this.db);
    }
    runTransaction(cb) {
        return runTransaction(this.db, (tx) => cb(tx));
    }
    createId(params) {
        return this.getRef(params)?.id;
    }
    /** Get the content of the snapshot */
    snapToData(snap) {
        return this.fromFirestore(snap);
    }
    /** Get the content of reference(s) */
    async getFromRef(ref) {
        const snap = await getDoc(ref);
        return this.snapToData(snap);
    }
    /** Observable the content of reference(s)  */
    fromRef(ref) {
        return this.useCache(ref);
    }
    ///////////////
    // SNAPSHOTS //
    ///////////////
    /** Get the reference of the document, collection or query */
    getRef(parameters) {
        const path = parameters ? pathWithParams(this.path, parameters) : this.path;
        const ref = this.firestore.getRef(path);
        if (!ref)
            throw new Error(`Could not create a reference out of path "${path}"`);
        return ref;
    }
    /** Clear cache and get the latest value into the cache */
    async reload(parameters) {
        if (!this.memorize)
            return;
        const ref = this.getRef(parameters);
        this.clearCache(ref);
        return this.load(parameters);
    }
    /** Get the last content from the app (if value has been cached, it won't do a server request) */
    async load(parameters) {
        return firstValueFrom(this.valueChanges(parameters));
    }
    /** Return the current value of the document from Firestore */
    async getValue(parameters) {
        const ref = this.getRef(parameters);
        return this.getFromRef(ref);
    }
    /** Listen to the changes of values of the document from Firestore */
    valueChanges(parameters) {
        const ref = this.getRef(parameters);
        return this.fromRef(ref);
    }
    ///////////
    // WRITE //
    ///////////
    /**
     * Create or update the document
     * @param document The document to upsert
     * @param options options to write the document on firestore
     */
    async upsert(document, options = {}) {
        const id = document[this.idKey];
        if (typeof id !== 'string')
            return this.create(document, options);
        const ref = this.getRef(options.params);
        const snap = (options?.write instanceof Transaction)
            ? await options.write?.get(ref)
            : await getDoc(ref);
        if (snap.exists())
            return this.create(document, options);
        await this.update(document, options);
        return id;
    }
    /**
     * Create the document at the specified path
     * @param document The document to create
     * @param options options to write the document on firestore
     */
    async create(document, options = {}) {
        const baseId = document[this.idKey];
        const id = typeof baseId === 'string' ? baseId : this.createId();
        const data = await this.toFirestore(document, 'create');
        if (this.storeId)
            data[this.idKey] = id;
        const ref = this.getRef(options.params);
        if (options.write) {
            options.write.set(ref, data);
        }
        else {
            await setDoc(ref, data);
        }
        if (this.onCreate) {
            await this.onCreate(data, { write: options.write, ctx: options.ctx });
        }
        return id;
    }
    /**
     * Delete the document from firestore
     * @param options options to write the document on firestore
     */
    async delete(options = {}) {
        const { write = this.batch(), ctx, params } = options;
        const ref = this.getRef(params);
        write.delete(ref);
        if (this.onDelete) {
            await this.onDelete(ref.path, { write, ctx });
        }
        // If there is no atomic write provided
        if (!options.write) {
            await write.commit();
            if (this.memorize)
                this.clearCache(ref);
        }
    }
    async update(changes, options = {}) {
        const ref = this.getRef(options.params);
        if (typeof changes === 'function') {
            await runTransaction(this.db, async (tx) => {
                const snapshot = await tx.get(ref);
                const doc = await this.fromFirestore(snapshot);
                if (doc && changes) {
                    const data = await changes(doc, tx);
                    const result = await this.toFirestore(data, 'update');
                    tx.update(ref, result);
                    if (this.onUpdate) {
                        await this.onUpdate(data, { write: tx, ctx: options.ctx });
                    }
                }
            });
        }
        else {
            const doc = await this.toFirestore(changes, 'update');
            if (options.write) {
                options.write.update(ref, doc);
            }
            else {
                await updateDoc(ref, doc);
            }
            if (this.onUpdate) {
                await this.onUpdate(doc, { write: options.write, ctx: options.ctx });
            }
        }
        if (this.memorize)
            this.clearCache(ref);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nZmlyZS9maXJlc3RvcmUvc3JjL2RvY3VtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBZ0MsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXRJLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFdEMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNyRSxPQUFPLEVBQW9CLGNBQWMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4RCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVqQyxhQUFhO0FBQ2IsYUFBYTtBQUNiLGFBQWE7QUFFYixNQUFNLE9BQWdCLFlBQVk7SUFBbEM7UUFDWSxlQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pDLFNBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEIsY0FBUyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXJDLFVBQUssR0FBZ0IsSUFBVyxDQUFDO1FBQzNDLG9FQUFvRTtRQUMxRCxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQzFCOztXQUVHO1FBQ08s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TSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztvQkFDdEQsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQ3ZCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTt3QkFDakIsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO3FCQUM1RDtpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBSSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDekQsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO2dCQUNoQixPQUFPLENBQUMsS0FBb0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ2hEO2lCQUFNO2dCQUNMLE1BQU0sU0FBUyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUMzQjtZQUNELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzthQUN0RTtTQUNGO1FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFMUMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvbiAqL1xuaW1wb3J0IHsgaW5qZWN0LCBOZ1pvbmUsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB3cml0ZUJhdGNoLCBydW5UcmFuc2FjdGlvbiwgZ2V0RG9jLCBUcmFuc2FjdGlvbiwgRG9jdW1lbnRTbmFwc2hvdCwgRmllbGRWYWx1ZSwgc2V0RG9jLCB1cGRhdGVEb2MgfSBmcm9tICdmaXJlYmFzZS9maXJlc3RvcmUnO1xuaW1wb3J0IHR5cGUgeyBEb2N1bWVudERhdGEsIERvY3VtZW50UmVmZXJlbmNlLCBRdWVyeURvY3VtZW50U25hcHNob3QsIFdyaXRlQmF0Y2ggfSBmcm9tICdmaXJlYmFzZS9maXJlc3RvcmUnO1xuaW1wb3J0IHsgZnJvbVJlZiB9IGZyb20gJy4vb3BlcmF0b3JzJztcbmltcG9ydCB0eXBlIHsgV3JpdGVPcHRpb25zLCBVcGRhdGVDYWxsYmFjaywgTWV0YURvY3VtZW50LCBQYXJhbXMsIEZpcmVFbnRpdHksIERlZXBLZXlzIH0gZnJvbSAnbmdmaXJlL2NvcmUnO1xuaW1wb3J0IHsga2VlcFVuc3RhYmxlVW50aWxGaXJzdCwgcGF0aFdpdGhQYXJhbXMgfSBmcm9tICduZ2ZpcmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBmaXJzdFZhbHVlRnJvbSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwLCBzdGFydFdpdGgsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBGaXJlc3RvcmVTZXJ2aWNlIH0gZnJvbSAnLi9maXJlc3RvcmUnO1xuaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSAnLi91dGlscyc7XG5cbi8vLy8vLy8vLy8vLy9cbi8vIFNFUlZJQ0UgLy9cbi8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZpcmVEb2N1bWVudDxFIGV4dGVuZHMgRG9jdW1lbnREYXRhPiB7XG4gIHByb3RlY3RlZCBwbGF0Zm9ybUlkID0gaW5qZWN0KFBMQVRGT1JNX0lEKTtcbiAgcHJvdGVjdGVkIHpvbmUgPSBpbmplY3QoTmdab25lKTtcbiAgcHJvdGVjdGVkIGZpcmVzdG9yZSA9IGluamVjdChGaXJlc3RvcmVTZXJ2aWNlKTtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHJlYWRvbmx5IHBhdGg6IHN0cmluZztcbiAgcHJvdGVjdGVkIGlkS2V5OiBEZWVwS2V5czxFPiA9ICdpZCcgYXMgYW55O1xuICAvKiogSWYgdHJ1ZSwgd2lsbCBzdG9yZSB0aGUgZG9jdW1lbnQgaWQgKElkS2V5KSBvbnRvIHRoZSBkb2N1bWVudCAqL1xuICBwcm90ZWN0ZWQgc3RvcmVJZCA9IGZhbHNlO1xuICAvKipcbiAgICogQ2FjaGUgdGhlIHNuYXBzaG90IGludG8gYSBnbG9iYWwgc3RvcmVcbiAgICovXG4gIHByb3RlY3RlZCBtZW1vcml6ZSA9IGZhbHNlO1xuICAvKipcbiAgICogRGVsYXkgYmVmb3JlIHVuc3Vic2NyaWJpbmcgdG8gYSBxdWVyeSAodXNlZCBvbmx5IHdpdGggbWVtb3JpemVkIGlzIHRydWUpXG4gICAqIFVzZSBJbmZpbnR5IGZvciBhcHBsaWNhdGlvbiBsb25nIHN1YnNjcmlwdGlvblxuICAgKi9cbiAgcHJvdGVjdGVkIGRlbGF5VG9VbnN1YnNjcmliZSA9IDA7XG5cbiAgcHJvdGVjdGVkIG9uQ3JlYXRlPyhlbnRpdHk6IEUsIG9wdGlvbnM6IFdyaXRlT3B0aW9ucyk6IHVua25vd247XG4gIHByb3RlY3RlZCBvblVwZGF0ZT8oZW50aXR5OiBGaXJlRW50aXR5PEU+LCBvcHRpb25zOiBXcml0ZU9wdGlvbnMpOiB1bmtub3duO1xuICBwcm90ZWN0ZWQgb25EZWxldGU/KHBhdGg6IHN0cmluZywgb3B0aW9uczogV3JpdGVPcHRpb25zKTogdW5rbm93bjtcblxuXG4gIHByb3RlY3RlZCBnZXQgZGIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlyZXN0b3JlLmRiO1xuICB9XG5cbiAgcHJvdGVjdGVkIHVzZUNhY2hlPFQgZXh0ZW5kcyBFPihyZWY6IERvY3VtZW50UmVmZXJlbmNlPFQ+KTogT2JzZXJ2YWJsZTxUIHwgdW5kZWZpbmVkPiB7ICAgXG4gICAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBmcm9tUmVmKHJlZikpLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcChhc3luYyBzbmFwID0+IHRoaXMuc25hcFRvRGF0YShzbmFwKSksXG4gICAgICAgIHRhcCh2YWx1ZSA9PiB0aGlzLmZpcmVzdG9yZS5zZXRUcmFuc2ZlcihyZWYsIHZhbHVlKSksXG4gICAgICAgIGtlZXBVbnN0YWJsZVVudGlsRmlyc3QodGhpcy56b25lKSxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghdGhpcy5tZW1vcml6ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBmcm9tUmVmKHJlZikpLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcChhc3luYyBzbmFwID0+IHRoaXMuc25hcFRvRGF0YShzbmFwKSksXG4gICAgICAgIGtlZXBVbnN0YWJsZVVudGlsRmlyc3QodGhpcy56b25lKVxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNmZXIgPSB0aGlzLmZpcmVzdG9yZS5nZXRUcmFuc2ZlcihyZWYpO1xuICAgIGNvbnN0IGluaXRpYWwgPSB0aGlzLmZpcmVzdG9yZS5nZXRTdGF0ZShyZWYpO1xuICAgIGNvbnN0IHNuYXAkID0gdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMuZmlyZXN0b3JlLmZyb21NZW1vcnk8VD4ocmVmLCB0aGlzLmRlbGF5VG9VbnN1YnNjcmliZSkpLnBpcGUoXG4gICAgICB0YXAoc25hcCA9PiB0aGlzLmZpcmVzdG9yZS5zZXRTdGF0ZShyZWYsIHNuYXApKSxcbiAgICAgIGtlZXBVbnN0YWJsZVVudGlsRmlyc3QodGhpcy56b25lKVxuICAgICk7XG4gICAgaWYgKHRyYW5zZmVyKSByZXR1cm4gc25hcCQucGlwZShzd2l0Y2hNYXAoYXN5bmMgc25hcCA9PiB0aGlzLnNuYXBUb0RhdGEoc25hcCkpLCBzdGFydFdpdGgodHJhbnNmZXIpKTtcbiAgICBpZiAoaW5pdGlhbCkgcmV0dXJuIHNuYXAkLnBpcGUoc3RhcnRXaXRoKGluaXRpYWwpLCBzd2l0Y2hNYXAoYXN5bmMgc25hcCA9PiB0aGlzLnNuYXBUb0RhdGEoc25hcCkpKTtcbiAgICByZXR1cm4gc25hcCQucGlwZShzd2l0Y2hNYXAoYXN5bmMgc25hcCA9PiB0aGlzLnNuYXBUb0RhdGEoc25hcCkpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjbGVhckNhY2hlPFQgZXh0ZW5kcyBFPihyZWY6IERvY3VtZW50UmVmZXJlbmNlPFQ+KSB7XG4gICAgcmV0dXJuIHRoaXMuZmlyZXN0b3JlLmNsZWFyQ2FjaGUocmVmLnBhdGgpO1xuICB9XG5cbiAgLyoqIEZ1bmN0aW9uIHRyaWdnZXJlZCB3aGVuIGFkZGluZy91cGRhdGluZyBkYXRhIHRvIGZpcmVzdG9yZSAqL1xuICBwcm90ZWN0ZWQgdG9GaXJlc3RvcmU8VCBleHRlbmRzIEUgPSBFPihlbnRpdHk6IEZpcmVFbnRpdHk8VD4sIGFjdGlvblR5cGU6ICdjcmVhdGUnIHwgJ3VwZGF0ZScpOiBhbnkgfCBQcm9taXNlPGFueT4ge1xuICAgIGlmIChhY3Rpb25UeXBlID09PSAnY3JlYXRlJykge1xuICAgICAgY29uc3QgX21ldGE6IE1ldGFEb2N1bWVudCA9IHsgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLCBtb2RpZmllZEF0OiBuZXcgRGF0ZSgpIH07XG4gICAgICByZXR1cm4geyBfbWV0YSwgLi4uZW50aXR5IH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7IC4uLmVudGl0eSwgJ19tZXRhLm1vZGlmaWVkQXQnOiBuZXcgRGF0ZSgpIH07XG4gICAgfVxuICB9XG5cbiAgLyoqIEZ1bmN0aW9uIHRyaWdnZXJlZCB3aGVuIGdldHRpbmcgZGF0YSBmcm9tIGZpcmVzdG9yZSAqL1xuICBwcm90ZWN0ZWQgZnJvbUZpcmVzdG9yZTxUIGV4dGVuZHMgRSA9IEU+KHNuYXBzaG90OiBEb2N1bWVudFNuYXBzaG90PFQ+IHwgUXVlcnlEb2N1bWVudFNuYXBzaG90PFQ+KTogUHJvbWlzZTxUPiB8IFQgfCB1bmRlZmluZWQge1xuICAgIGlmIChzbmFwc2hvdC5leGlzdHMoKSkge1xuICAgICAgcmV0dXJuIHsgLi4udG9EYXRlKHNuYXBzaG90LmRhdGEoKSksIFt0aGlzLmlkS2V5XTogc25hcHNob3QuaWQgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBiYXRjaCgpIHtcbiAgICByZXR1cm4gd3JpdGVCYXRjaCh0aGlzLmRiKTtcbiAgfVxuXG4gIHJ1blRyYW5zYWN0aW9uPFQ+KGNiOiAodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uKSA9PiBQcm9taXNlPFQ+KSB7XG4gICAgcmV0dXJuIHJ1blRyYW5zYWN0aW9uPFQ+KHRoaXMuZGIsICh0eCkgPT4gY2IodHgpKTtcbiAgfVxuXG4gIGNyZWF0ZUlkKHBhcmFtcz86IFBhcmFtcykge1xuICAgIHJldHVybiB0aGlzLmdldFJlZihwYXJhbXMpPy5pZDtcbiAgfVxuXG5cbiAgLyoqIEdldCB0aGUgY29udGVudCBvZiB0aGUgc25hcHNob3QgKi9cbiAgcHJvdGVjdGVkIHNuYXBUb0RhdGE8VCBleHRlbmRzIEUgPSBFPihzbmFwOiBEb2N1bWVudFNuYXBzaG90PFQ+KSB7XG4gICAgcmV0dXJuIHRoaXMuZnJvbUZpcmVzdG9yZTxUPihzbmFwKTtcbiAgfVxuXG4gIC8qKiBHZXQgdGhlIGNvbnRlbnQgb2YgcmVmZXJlbmNlKHMpICovXG4gIHByb3RlY3RlZCBhc3luYyBnZXRGcm9tUmVmPFQgZXh0ZW5kcyBFID0gRT4ocmVmOiBEb2N1bWVudFJlZmVyZW5jZTxUPik6IFByb21pc2U8VCB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IHNuYXAgPSBhd2FpdCBnZXREb2MocmVmKTtcbiAgICByZXR1cm4gdGhpcy5zbmFwVG9EYXRhKHNuYXApO1xuICB9XG5cbiAgLyoqIE9ic2VydmFibGUgdGhlIGNvbnRlbnQgb2YgcmVmZXJlbmNlKHMpICAqL1xuICBwcm90ZWN0ZWQgZnJvbVJlZjxUIGV4dGVuZHMgRSA9IEU+KHJlZjogRG9jdW1lbnRSZWZlcmVuY2U8VD4pOiBPYnNlcnZhYmxlPFQgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy51c2VDYWNoZShyZWYpO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFNOQVBTSE9UUyAvL1xuICAvLy8vLy8vLy8vLy8vLy9cblxuICAvKiogR2V0IHRoZSByZWZlcmVuY2Ugb2YgdGhlIGRvY3VtZW50LCBjb2xsZWN0aW9uIG9yIHF1ZXJ5ICovXG4gIHB1YmxpYyBnZXRSZWY8VCBleHRlbmRzIEU+KHBhcmFtZXRlcnM/OiBQYXJhbXMpOiBEb2N1bWVudFJlZmVyZW5jZTxUPiB7XG4gICAgY29uc3QgcGF0aCA9IHBhcmFtZXRlcnMgPyBwYXRoV2l0aFBhcmFtcyh0aGlzLnBhdGgsIHBhcmFtZXRlcnMpIDogdGhpcy5wYXRoO1xuICAgIGNvbnN0IHJlZiA9IHRoaXMuZmlyZXN0b3JlLmdldFJlZjxUPihwYXRoKSBhcyBEb2N1bWVudFJlZmVyZW5jZTxUPjtcbiAgICBpZiAoIXJlZikgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgY3JlYXRlIGEgcmVmZXJlbmNlIG91dCBvZiBwYXRoIFwiJHtwYXRofVwiYCk7XG4gICAgcmV0dXJuIHJlZjtcbiAgfVxuXG4gIC8qKiBDbGVhciBjYWNoZSBhbmQgZ2V0IHRoZSBsYXRlc3QgdmFsdWUgaW50byB0aGUgY2FjaGUgKi9cbiAgcHVibGljIGFzeW5jIHJlbG9hZDxUIGV4dGVuZHMgRSA9IEU+KHBhcmFtZXRlcnM/OiBQYXJhbXMpOiBQcm9taXNlPFQgfCB1bmRlZmluZWQ+IHtcbiAgICBpZiAoIXRoaXMubWVtb3JpemUpIHJldHVybjtcbiAgICBjb25zdCByZWYgPSB0aGlzLmdldFJlZihwYXJhbWV0ZXJzKTtcbiAgICB0aGlzLmNsZWFyQ2FjaGUocmVmKTtcbiAgICByZXR1cm4gdGhpcy5sb2FkKHBhcmFtZXRlcnMpO1xuICB9XG5cbiAgLyoqIEdldCB0aGUgbGFzdCBjb250ZW50IGZyb20gdGhlIGFwcCAoaWYgdmFsdWUgaGFzIGJlZW4gY2FjaGVkLCBpdCB3b24ndCBkbyBhIHNlcnZlciByZXF1ZXN0KSAqL1xuICBwdWJsaWMgYXN5bmMgbG9hZDxUIGV4dGVuZHMgRT4ocGFyYW1ldGVycz86IFBhcmFtcyk6IFByb21pc2U8VCB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiBmaXJzdFZhbHVlRnJvbSh0aGlzLnZhbHVlQ2hhbmdlcyhwYXJhbWV0ZXJzKSk7XG4gIH1cblxuICAvKiogUmV0dXJuIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBkb2N1bWVudCBmcm9tIEZpcmVzdG9yZSAqL1xuICBwdWJsaWMgYXN5bmMgZ2V0VmFsdWU8VCBleHRlbmRzIEUgPSBFPihwYXJhbWV0ZXJzPzogUGFyYW1zKTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgcmVmID0gdGhpcy5nZXRSZWY8VD4ocGFyYW1ldGVycyk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RnJvbVJlZjxUPihyZWYpO1xuICB9XG5cbiAgLyoqIExpc3RlbiB0byB0aGUgY2hhbmdlcyBvZiB2YWx1ZXMgb2YgdGhlIGRvY3VtZW50IGZyb20gRmlyZXN0b3JlICovXG4gIHB1YmxpYyB2YWx1ZUNoYW5nZXM8VCBleHRlbmRzIEUgPSBFPihwYXJhbWV0ZXJzPzogUGFyYW1zKTogT2JzZXJ2YWJsZTxUIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgcmVmID0gdGhpcy5nZXRSZWY8VD4ocGFyYW1ldGVycyk7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVJlZjxUPihyZWYpO1xuICB9XG5cblxuICAvLy8vLy8vLy8vL1xuICAvLyBXUklURSAvL1xuICAvLy8vLy8vLy8vL1xuICAvKipcbiAgICogQ3JlYXRlIG9yIHVwZGF0ZSB0aGUgZG9jdW1lbnRcbiAgICogQHBhcmFtIGRvY3VtZW50IFRoZSBkb2N1bWVudCB0byB1cHNlcnRcbiAgICogQHBhcmFtIG9wdGlvbnMgb3B0aW9ucyB0byB3cml0ZSB0aGUgZG9jdW1lbnQgb24gZmlyZXN0b3JlXG4gICAqL1xuICBhc3luYyB1cHNlcnQ8VCBleHRlbmRzIEU+KGRvY3VtZW50OiBGaXJlRW50aXR5PFQ+LCBvcHRpb25zOiBXcml0ZU9wdGlvbnMgPSB7fSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgaWQ6IHN0cmluZyB8IEZpZWxkVmFsdWUgfCB1bmRlZmluZWQgPSBkb2N1bWVudFt0aGlzLmlkS2V5XTtcbiAgICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykgcmV0dXJuIHRoaXMuY3JlYXRlKGRvY3VtZW50LCBvcHRpb25zKTtcbiAgICBjb25zdCByZWYgPSB0aGlzLmdldFJlZihvcHRpb25zLnBhcmFtcyk7XG4gICAgY29uc3Qgc25hcCA9IChvcHRpb25zPy53cml0ZSBpbnN0YW5jZW9mIFRyYW5zYWN0aW9uKVxuICAgICAgPyBhd2FpdCBvcHRpb25zLndyaXRlPy5nZXQocmVmKVxuICAgICAgOiBhd2FpdCBnZXREb2MocmVmKTtcbiAgICBpZiAoc25hcC5leGlzdHMoKSkgcmV0dXJuIHRoaXMuY3JlYXRlKGRvY3VtZW50LCBvcHRpb25zKTtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShkb2N1bWVudCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgZG9jdW1lbnQgYXQgdGhlIHNwZWNpZmllZCBwYXRoXG4gICAqIEBwYXJhbSBkb2N1bWVudCBUaGUgZG9jdW1lbnQgdG8gY3JlYXRlXG4gICAqIEBwYXJhbSBvcHRpb25zIG9wdGlvbnMgdG8gd3JpdGUgdGhlIGRvY3VtZW50IG9uIGZpcmVzdG9yZVxuICAgKi9cbiAgYXN5bmMgY3JlYXRlPFQgZXh0ZW5kcyBFPihkb2N1bWVudDogRmlyZUVudGl0eTxUPiwgb3B0aW9uczogV3JpdGVPcHRpb25zID0ge30pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IGJhc2VJZDogc3RyaW5nIHwgRmllbGRWYWx1ZSB8IHVuZGVmaW5lZCA9IGRvY3VtZW50W3RoaXMuaWRLZXldO1xuICAgIGNvbnN0IGlkID0gdHlwZW9mIGJhc2VJZCA9PT0gJ3N0cmluZycgPyBiYXNlSWQgOiB0aGlzLmNyZWF0ZUlkKCk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMudG9GaXJlc3RvcmUoZG9jdW1lbnQsICdjcmVhdGUnKTtcbiAgICBpZiAodGhpcy5zdG9yZUlkKSBkYXRhW3RoaXMuaWRLZXldID0gaWQ7XG4gICAgY29uc3QgcmVmID0gdGhpcy5nZXRSZWYob3B0aW9ucy5wYXJhbXMpO1xuICAgIGlmIChvcHRpb25zLndyaXRlKSB7XG4gICAgICAob3B0aW9ucy53cml0ZSBhcyBXcml0ZUJhdGNoKS5zZXQocmVmLCBkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgc2V0RG9jKHJlZiwgZGF0YSk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9uQ3JlYXRlKSB7XG4gICAgICBhd2FpdCB0aGlzLm9uQ3JlYXRlKGRhdGEsIHsgd3JpdGU6IG9wdGlvbnMud3JpdGUsIGN0eDogb3B0aW9ucy5jdHggfSk7XG4gICAgfVxuICAgIHJldHVybiBpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgdGhlIGRvY3VtZW50IGZyb20gZmlyZXN0b3JlXG4gICAqIEBwYXJhbSBvcHRpb25zIG9wdGlvbnMgdG8gd3JpdGUgdGhlIGRvY3VtZW50IG9uIGZpcmVzdG9yZVxuICAgKi9cbiAgYXN5bmMgZGVsZXRlPFQgZXh0ZW5kcyBFPihvcHRpb25zOiBXcml0ZU9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgd3JpdGUgPSB0aGlzLmJhdGNoKCksIGN0eCwgcGFyYW1zIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHJlZiA9IHRoaXMuZ2V0UmVmPFQ+KHBhcmFtcyk7XG4gICAgd3JpdGUuZGVsZXRlKHJlZik7XG4gICAgaWYgKHRoaXMub25EZWxldGUpIHtcbiAgICAgIGF3YWl0IHRoaXMub25EZWxldGUocmVmLnBhdGgsIHsgd3JpdGUsIGN0eCB9KTtcbiAgICB9XG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gYXRvbWljIHdyaXRlIHByb3ZpZGVkXG4gICAgaWYgKCFvcHRpb25zLndyaXRlKSB7XG4gICAgICBhd2FpdCAod3JpdGUgYXMgV3JpdGVCYXRjaCkuY29tbWl0KCk7XG4gICAgICBpZiAodGhpcy5tZW1vcml6ZSkgdGhpcy5jbGVhckNhY2hlKHJlZik7XG4gICAgfVxuICB9XG5cbiAgLyoqIFVwZGF0ZSBkb2N1bWVudCBpbiBGaXJlc3RvcmUgKi9cbiAgdXBkYXRlPFQgZXh0ZW5kcyBFPihkb2N1bWVudDogRmlyZUVudGl0eTxUPiwgb3B0aW9ucz86IFdyaXRlT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG4gIHVwZGF0ZTxUIGV4dGVuZHMgRT4oZG9jdW1lbnRDaGFuZ2VzOiBVcGRhdGVDYWxsYmFjazxUPiwgb3B0aW9ucz86IFdyaXRlT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG4gIGFzeW5jIHVwZGF0ZTxUIGV4dGVuZHMgRT4oXG4gICAgY2hhbmdlczogVXBkYXRlQ2FsbGJhY2s8VD4gfCBGaXJlRW50aXR5PFQ+LFxuICAgIG9wdGlvbnM6IFdyaXRlT3B0aW9ucyA9IHt9XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHJlZiA9IHRoaXMuZ2V0UmVmPFQ+KG9wdGlvbnMucGFyYW1zKTtcbiAgICBpZiAodHlwZW9mIGNoYW5nZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGF3YWl0IHJ1blRyYW5zYWN0aW9uKHRoaXMuZGIsIGFzeW5jICh0eCkgPT4ge1xuICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IHR4LmdldChyZWYpO1xuICAgICAgICBjb25zdCBkb2MgPSBhd2FpdCB0aGlzLmZyb21GaXJlc3RvcmU8VD4oc25hcHNob3QpO1xuICAgICAgICBpZiAoZG9jICYmIGNoYW5nZXMpIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgY2hhbmdlcyhkb2MsIHR4KTtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnRvRmlyZXN0b3JlKGRhdGEsICd1cGRhdGUnKTtcbiAgICAgICAgICB0eC51cGRhdGUocmVmLCByZXN1bHQpO1xuICAgICAgICAgIGlmICh0aGlzLm9uVXBkYXRlKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm9uVXBkYXRlKGRhdGEsIHsgd3JpdGU6IHR4LCBjdHg6IG9wdGlvbnMuY3R4IH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRvYyA9IGF3YWl0IHRoaXMudG9GaXJlc3RvcmU8VD4oY2hhbmdlcywgJ3VwZGF0ZScpO1xuICAgICAgaWYgKG9wdGlvbnMud3JpdGUpIHtcbiAgICAgICAgKG9wdGlvbnMud3JpdGUgYXMgV3JpdGVCYXRjaCkudXBkYXRlKHJlZiwgZG9jKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF3YWl0IHVwZGF0ZURvYyhyZWYsIGRvYyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vblVwZGF0ZSkge1xuICAgICAgICBhd2FpdCB0aGlzLm9uVXBkYXRlKGRvYywgeyB3cml0ZTogb3B0aW9ucy53cml0ZSwgY3R4OiBvcHRpb25zLmN0eCB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMubWVtb3JpemUpIHRoaXMuY2xlYXJDYWNoZShyZWYpO1xuXG4gIH1cbn1cbiJdfQ==