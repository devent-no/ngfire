import { inject } from "@angular/core";
import { set } from "firebase/database";
import { push, get, remove, update } from "firebase/database";
import { combineLatest, of } from "rxjs";
import { map } from "rxjs/operators";
import { exist, isIdList, pathWithParams } from "ngfire/core";
import { FireDatabase } from "./database";
import { serverTimestamp } from 'firebase/database';
import { fromDate, toDate } from "./utils";
function isListQuery(query) {
    if (typeof query === 'string')
        return false;
    if (Array.isArray(query) && isIdList(query))
        return false;
    return true;
}
function toKey(value) {
    if (typeof value === 'string')
        return value;
    if (typeof value === 'number')
        return value.toString();
    throw new Error('Key of list should either be a string or a number');
}
export function addMeta(doc, actionType) {
    const _meta = doc['_meta'] ?? {};
    if (actionType === 'add')
        _meta.createdAt = serverTimestamp();
    if (actionType === 'update')
        _meta.modifiedAt = serverTimestamp();
    doc._meta = _meta;
}
export class FireList {
    constructor() {
        this.fireDB = inject(FireDatabase);
    }
    fromDatabase(snap) {
        if (!snap.exists())
            return null;
        const value = snap.val();
        const dateKeys = [...this.dateKeys, '_meta.createdAt', '_meta.modifiedAt'];
        if (!value || typeof value !== 'object')
            return toDate(value, dateKeys);
        if (this.idKey)
            value[this.idKey] = snap.key;
        if (this.pathKey)
            value[this.pathKey] = snap.ref.toString();
        return toDate(value, dateKeys);
    }
    toDatabase(doc, actionType) {
        return fromDate(doc);
    }
    toData(snaps, options) {
        if (!snaps)
            return null;
        if (Array.isArray(snaps))
            return snaps.map(snap => this.toData(snap, { isList: false })).filter(exist);
        if (!options.isList)
            return this.fromDatabase(snaps);
        const docs = [];
        // forEach cancels when return value is "true". So I return "false"
        snaps.forEach(snap => !docs.push(this.fromDatabase(snap)));
        return docs.filter(exist);
    }
    getPath(key, params) {
        if (typeof key === 'string')
            return pathWithParams(`${this.path}/${key}`, params);
        return pathWithParams(this.path, key);
    }
    getRef(query, params) {
        // String or Params (getPath return base path is query is Params)
        if (!Array.isArray(query))
            return this.fireDB.getRef(this.getPath(query), params);
        return isIdList(query)
            // key list
            ? this.fireDB.getRef(query.map(key => this.getPath(key)), params)
            // query constraints
            : this.fireDB.getRef(this.getPath(), query, params);
    }
    fromQuery(query, params) {
        const refs = this.getRef(query, params);
        if (!Array.isArray(refs))
            return this.fireDB.fromQuery(refs);
        const obs = refs.map(ref => this.fireDB.fromQuery(ref));
        return combineLatest(obs);
    }
    getQuery(query, params) {
        const refs = this.getRef(query, params);
        if (!Array.isArray(refs))
            return get(refs);
        const promises = refs.map(ref => get(ref));
        return Promise.all(promises);
    }
    valueChanges(query, params) {
        if (arguments.length && !query)
            return of(null);
        return this.fromQuery(query, params).pipe(map(snap => this.toData(snap, { isList: isListQuery(query) })));
    }
    async getValue(query, params) {
        if (arguments.length && !query)
            return Promise.resolve(null);
        const snap = await this.getQuery(query, params);
        return this.toData(snap, { isList: isListQuery(query) });
    }
    add(value, params) {
        const doc = this.toDatabase(value, 'add');
        if (this.idKey && doc[this.idKey]) {
            const key = toKey(doc[this.idKey]);
            const ref = this.getRef(key, params);
            return set(ref, doc);
        }
        const listRef = params ? this.getRef(params) : this.getRef();
        return push(listRef, doc);
    }
    update(key, value, params) {
        const doc = this.toDatabase(value, 'update');
        const path = this.getRef(key, params);
        return update(path, doc);
    }
    remove(key, params) {
        const ref = this.getRef(key, params);
        return remove(ref);
    }
    /** We use a separated method to avoid mistakes */
    removeAll(params) {
        const ref = params ? this.getRef(params) : this.getRef();
        return remove(ref);
    }
}
//# sourceMappingURL=data:application/json;base64,