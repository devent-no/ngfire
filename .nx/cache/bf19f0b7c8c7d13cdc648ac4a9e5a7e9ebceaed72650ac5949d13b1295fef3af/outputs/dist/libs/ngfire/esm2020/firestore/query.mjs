import { exist } from 'ngfire/core';
// Simplfied version of 
// https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/core/query.ts#L442
export function stringifyQuery(query) {
    if ('_query' in query) {
        const target = query['_query'];
        return `${stringifyTarget(target)}|lt:${target.limitType})`;
    }
    return '';
}
function stringifyTarget(target) {
    if (!target.orderBy)
        target.orderBy = [];
    let str = target.path.canonicalString();
    if (target.collectionGroup !== null) {
        str += '|cg:' + target.collectionGroup;
    }
    if (target.filters.length > 0) {
        const fields = target.filters
            .map((f) => stringifyFilter(f))
            .join(', ');
        str += `|f:[${fields}]`;
    }
    if (exist(target.limit)) {
        str += '|l:' + target.limit;
    }
    if (target.orderBy.length > 0) {
        const order = target.orderBy
            .map((o) => stringifyOrderBy(o))
            .join(', ');
        str += `|ob:[${order}]`;
    }
    if (target.startAt) {
        str += '|lb:';
        str += target.startAt.inclusive ? 'b:' : 'a:';
        str += target.startAt.position.map((p) => canonifyValue(p)).join(',');
    }
    if (target.endAt) {
        str += '|ub:';
        str += target.endAt.inclusive ? 'a:' : 'b:';
        str += target.endAt.position.map((p) => canonifyValue(p)).join(',');
    }
    return str;
}
/** Returns a debug description for `filter`. */
export function stringifyFilter(filter) {
    return `${filter.field.canonicalString()} ${filter.op} ${canonifyValue(filter.value)}`;
}
export function stringifyOrderBy(orderBy) {
    return `${orderBy.field.canonicalString()} (${orderBy.dir})`;
}
/* eslint-disable */
function canonifyValue(value) {
    if ('nullValue' in value) {
        return 'null';
    }
    else if ('booleanValue' in value) {
        return '' + value.booleanValue;
    }
    else if ('integerValue' in value) {
        return '' + value.integerValue;
    }
    else if ('doubleValue' in value) {
        return '' + value.doubleValue;
    }
    else if ('timestampValue' in value) {
        return canonifyTimestamp(value.timestampValue);
    }
    else if ('stringValue' in value) {
        return value.stringValue;
    }
    else if ('bytesValue' in value) {
        return canonifyByteString(value.bytesValue);
    }
    else if ('referenceValue' in value) {
        return value.referenceValue;
    }
    else if ('geoPointValue' in value) {
        return canonifyGeoPoint(value.geoPointValue);
    }
    else if ('arrayValue' in value) {
        return canonifyArray(value.arrayValue);
    }
    else if ('mapValue' in value) {
        return canonifyMap(value.mapValue);
    }
    else {
        throw new Error('Invalid value type: ' + JSON.stringify(value));
    }
}
/* eslint-enable */
function canonifyByteString(byteString) {
    if (typeof byteString === 'string')
        return byteString;
    return byteString.toString();
}
function canonifyTimestamp(timestamp) {
    return `time(${timestamp.toString()})`;
}
function canonifyGeoPoint(geoPoint) {
    return `geo(${geoPoint.latitude},${geoPoint.longitude})`;
}
function canonifyMap(mapValue) {
    // Iteration order in JavaScript is not guaranteed. To ensure that we generate
    // matching canonical IDs for identical maps, we need to sort the keys.
    const sortedKeys = Object.keys(mapValue.fields || {}).sort();
    // eslint-disable-next-line
    const content = sortedKeys.map(key => `${key}:${canonifyValue(mapValue.fields[key])}`).join(',');
    return `{${content}}`;
}
function canonifyArray(arrayValue) {
    const values = arrayValue.values || [];
    return `[${values.map(canonifyValue).join(',')}]`;
}
//# sourceMappingURL=data:application/json;base64,