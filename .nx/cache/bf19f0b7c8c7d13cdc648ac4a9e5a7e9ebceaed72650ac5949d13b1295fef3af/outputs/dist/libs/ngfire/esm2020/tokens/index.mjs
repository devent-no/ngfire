import { inject, InjectionToken } from "@angular/core";
export const FIREBASE_APP_SETTINGS = new InjectionToken('FirebaseApp Configuration');
export const FIREBASE_CONFIG = new InjectionToken('Firebase Config');
export const REGION_OR_DOMAIN = new InjectionToken('Firebase cloud functions region or domain');
export const FIRESTORE_SETTINGS = new InjectionToken('Firestore settings');
export const ANALYTICS_SETTINGS = new InjectionToken('Analytics settings');
export const STORAGE_BUCKET = new InjectionToken('The gs:// url to your Firebase Storage Bucket.');
export const DB_URL = new InjectionToken('The URL of the Realtime Database instance to connect to');
export const AUTH_DEPS = new InjectionToken('The dependencies that can be used to initialize an Auth instance.');
export function getConfig() {
    try {
        return inject(FIREBASE_CONFIG);
    }
    catch (err) {
        const message = `You should add FIREBASE_CONFIG token to you root module providers (probably AppModule).
Example:
  
@NgModule({
  declarations: [...],
  imports: [...],
  providers: [{ provide: FIREBASE_CONFIG, useValue: environment.firebase }] <--- Add this
  ...
})

Original message: ${err.message}`;
        throw new Error(message);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nZmlyZS90b2tlbnMvc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBb0J2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBc0IsMkJBQTJCLENBQUMsQ0FBQztBQUMxRyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQWlCLGlCQUFpQixDQUFDLENBQUM7QUFDckYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQVMsMkNBQTJDLENBQUMsQ0FBQztBQUN4RyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FBb0Isb0JBQW9CLENBQUMsQ0FBQztBQUM5RixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FBb0Isb0JBQW9CLENBQUMsQ0FBQztBQUM5RixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQVMsZ0RBQWdELENBQUMsQ0FBQztBQUMzRyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLENBQVMseURBQXlELENBQUMsQ0FBQztBQUM1RyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQWUsbUVBQW1FLENBQUMsQ0FBQztBQUcvSCxNQUFNLFVBQVUsU0FBUztJQUN2QixJQUFJO1FBQ0YsT0FBTyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDaEM7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE1BQU0sT0FBTyxHQUFFOzs7Ozs7Ozs7O29CQVVFLEdBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQzFCO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHR5cGUgeyBGdW5jdGlvbnMsIGdldEZ1bmN0aW9ucyB9IGZyb20gXCJmaXJlYmFzZS9mdW5jdGlvbnNcIjtcbmltcG9ydCB0eXBlIHsgRmlyZWJhc2VTdG9yYWdlLCBnZXRTdG9yYWdlIH0gZnJvbSBcImZpcmViYXNlL3N0b3JhZ2VcIjtcbmltcG9ydCB0eXBlIHsgRmlyZWJhc2VBcHAsIEZpcmViYXNlQXBwU2V0dGluZ3MsIEZpcmViYXNlT3B0aW9ucywgaW5pdGlhbGl6ZUFwcCB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5pbXBvcnQgdHlwZSB7IEF1dGgsIERlcGVuZGVuY2llcywgaW5pdGlhbGl6ZUF1dGggfSBmcm9tIFwiZmlyZWJhc2UvYXV0aFwiO1xuaW1wb3J0IHR5cGUgeyBGaXJlc3RvcmUsIEZpcmVzdG9yZVNldHRpbmdzLCBpbml0aWFsaXplRmlyZXN0b3JlIH0gZnJvbSAnZmlyZWJhc2UvZmlyZXN0b3JlJztcbmltcG9ydCB0eXBlIHsgRGF0YWJhc2UsIGdldERhdGFiYXNlIH0gZnJvbSBcImZpcmViYXNlL2RhdGFiYXNlXCI7XG5pbXBvcnQgdHlwZSB7IEFuYWx5dGljcywgQW5hbHl0aWNzU2V0dGluZ3MsIGluaXRpYWxpemVBbmFseXRpY3MgfSBmcm9tIFwiZmlyZWJhc2UvYW5hbHl0aWNzXCI7XG5cblxuZXhwb3J0IGludGVyZmFjZSBGaXJlYmFzZUNvbmZpZyB7XG4gIG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucyxcbiAgYXBwPzogKC4uLnBhcmFtczogUGFyYW1ldGVyczx0eXBlb2YgaW5pdGlhbGl6ZUFwcD4pID0+IEZpcmViYXNlQXBwLFxuICBmaXJlc3RvcmU/OiAoLi4ucGFyYW1zOiBQYXJhbWV0ZXJzPHR5cGVvZiBpbml0aWFsaXplRmlyZXN0b3JlPikgPT4gRmlyZXN0b3JlLFxuICBhdXRoPzogKC4uLnBhcmFtczogUGFyYW1ldGVyczx0eXBlb2YgaW5pdGlhbGl6ZUF1dGg+KSA9PiBBdXRoLFxuICBzdG9yYWdlPzogKC4uLnBhcmFtczogUGFyYW1ldGVyczx0eXBlb2YgZ2V0U3RvcmFnZT4pID0+IEZpcmViYXNlU3RvcmFnZSxcbiAgZnVuY3Rpb25zPzogKC4uLnBhcmFtczogUGFyYW1ldGVyczx0eXBlb2YgZ2V0RnVuY3Rpb25zPikgPT4gRnVuY3Rpb25zLFxuICBkYXRhYmFzZT86ICguLi5wYXJhbXM6IFBhcmFtZXRlcnM8dHlwZW9mIGdldERhdGFiYXNlPikgPT4gRGF0YWJhc2UsXG4gIGFuYWx5dGljcz86ICguLi5wYXJhbXM6IFBhcmFtZXRlcnM8dHlwZW9mIGluaXRpYWxpemVBbmFseXRpY3M+KSA9PiBBbmFseXRpY3MsXG59XG5leHBvcnQgY29uc3QgRklSRUJBU0VfQVBQX1NFVFRJTkdTID0gbmV3IEluamVjdGlvblRva2VuPEZpcmViYXNlQXBwU2V0dGluZ3M+KCdGaXJlYmFzZUFwcCBDb25maWd1cmF0aW9uJyk7XG5leHBvcnQgY29uc3QgRklSRUJBU0VfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPEZpcmViYXNlQ29uZmlnPignRmlyZWJhc2UgQ29uZmlnJyk7XG5leHBvcnQgY29uc3QgUkVHSU9OX09SX0RPTUFJTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdGaXJlYmFzZSBjbG91ZCBmdW5jdGlvbnMgcmVnaW9uIG9yIGRvbWFpbicpO1xuZXhwb3J0IGNvbnN0IEZJUkVTVE9SRV9TRVRUSU5HUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxGaXJlc3RvcmVTZXR0aW5ncz4oJ0ZpcmVzdG9yZSBzZXR0aW5ncycpO1xuZXhwb3J0IGNvbnN0IEFOQUxZVElDU19TRVRUSU5HUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxBbmFseXRpY3NTZXR0aW5ncz4oJ0FuYWx5dGljcyBzZXR0aW5ncycpO1xuZXhwb3J0IGNvbnN0IFNUT1JBR0VfQlVDS0VUID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ1RoZSBnczovLyB1cmwgdG8geW91ciBGaXJlYmFzZSBTdG9yYWdlIEJ1Y2tldC4nKTtcbmV4cG9ydCBjb25zdCBEQl9VUkwgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignVGhlIFVSTCBvZiB0aGUgUmVhbHRpbWUgRGF0YWJhc2UgaW5zdGFuY2UgdG8gY29ubmVjdCB0bycpO1xuZXhwb3J0IGNvbnN0IEFVVEhfREVQUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxEZXBlbmRlbmNpZXM+KCdUaGUgZGVwZW5kZW5jaWVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZSBhbiBBdXRoIGluc3RhbmNlLicpO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25maWcoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGluamVjdChGSVJFQkFTRV9DT05GSUcpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zdCBtZXNzYWdlPSBgWW91IHNob3VsZCBhZGQgRklSRUJBU0VfQ09ORklHIHRva2VuIHRvIHlvdSByb290IG1vZHVsZSBwcm92aWRlcnMgKHByb2JhYmx5IEFwcE1vZHVsZSkuXG5FeGFtcGxlOlxuICBcbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWy4uLl0sXG4gIGltcG9ydHM6IFsuLi5dLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IEZJUkVCQVNFX0NPTkZJRywgdXNlVmFsdWU6IGVudmlyb25tZW50LmZpcmViYXNlIH1dIDwtLS0gQWRkIHRoaXNcbiAgLi4uXG59KVxuXG5PcmlnaW5hbCBtZXNzYWdlOiAkeyhlcnIgYXMgRXJyb3IpLm1lc3NhZ2V9YDtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn0iXX0=