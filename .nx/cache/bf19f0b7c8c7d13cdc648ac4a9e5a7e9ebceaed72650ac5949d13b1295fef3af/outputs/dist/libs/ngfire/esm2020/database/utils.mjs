/** Recursively all Date into Timestamp */
export function fromDate(target) {
    if (typeof target !== 'object')
        return target;
    for (const key in target) {
        const value = target[key];
        if (!value || typeof value !== 'object')
            continue;
        if (value instanceof Date) {
            target[key] = value.getTime();
            continue;
        }
        fromDate(value);
    }
    return target;
}
/** Recursively all Date into Timestamp */
export function toDate(target, dateKeys, path = '') {
    if (typeof target !== 'object')
        return target;
    for (const key in target) {
        const value = target[key];
        const deepKey = `${path}.${key}`;
        if (dateKeys.includes(deepKey)) {
            if (typeof value !== 'number')
                throw new Error(`Date key "${deepKey}" is not a number. Got ${value}`);
            target[key] = new Date(value);
            continue;
        }
        if (!value || typeof value !== 'object')
            continue;
        toDate(value, dateKeys, deepKey);
    }
    return target;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL25nZmlyZS9kYXRhYmFzZS9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMENBQTBDO0FBQzFDLE1BQU0sVUFBVSxRQUFRLENBQUksTUFBUztJQUNuQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVE7UUFBRSxPQUFPLE1BQU0sQ0FBQztJQUM5QyxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtRQUN4QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRO1lBQUUsU0FBUztRQUNsRCxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUU7WUFDekIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQVMsQ0FBQztZQUNyQyxTQUFTO1NBQ1Y7UUFDRCxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7S0FDaEI7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsMENBQTBDO0FBQzFDLE1BQU0sVUFBVSxNQUFNLENBQUksTUFBUyxFQUFFLFFBQWtCLEVBQUUsT0FBZSxFQUFFO0lBQ3hFLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUTtRQUFFLE9BQU8sTUFBTSxDQUFDO0lBQzlDLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3hCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixNQUFNLE9BQU8sR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNqQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDOUIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxPQUFPLDBCQUEwQixLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3RHLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQVEsQ0FBQztZQUNyQyxTQUFTO1NBQ1Y7UUFDRCxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVE7WUFBRSxTQUFTO1FBQ2xELE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ2xDO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBSZWN1cnNpdmVseSBhbGwgRGF0ZSBpbnRvIFRpbWVzdGFtcCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21EYXRlPEQ+KHRhcmdldDogRCk6IEQge1xuICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHJldHVybiB0YXJnZXQ7XG4gIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSBjb250aW51ZTtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHZhbHVlLmdldFRpbWUoKSBhcyBhbnk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZnJvbURhdGUodmFsdWUpXG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqIFJlY3Vyc2l2ZWx5IGFsbCBEYXRlIGludG8gVGltZXN0YW1wICovXG5leHBvcnQgZnVuY3Rpb24gdG9EYXRlPEQ+KHRhcmdldDogRCwgZGF0ZUtleXM6IHN0cmluZ1tdLCBwYXRoOiBzdHJpbmcgPSAnJyk6IEQge1xuICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHJldHVybiB0YXJnZXQ7XG4gIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgY29uc3QgZGVlcEtleSA9IGAke3BhdGh9LiR7a2V5fWA7XG4gICAgaWYgKGRhdGVLZXlzLmluY2x1ZGVzKGRlZXBLZXkpKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3IEVycm9yKGBEYXRlIGtleSBcIiR7ZGVlcEtleX1cIiBpcyBub3QgYSBudW1iZXIuIEdvdCAke3ZhbHVlfWApO1xuICAgICAgdGFyZ2V0W2tleV0gPSBuZXcgRGF0ZSh2YWx1ZSkgYXMgYW55O1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgY29udGludWU7XG4gICAgdG9EYXRlKHZhbHVlLCBkYXRlS2V5cywgZGVlcEtleSk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuXG4iXX0=